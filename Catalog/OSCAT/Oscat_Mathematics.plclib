<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<plcLibrary schemaVersion="2.9">
	<lib version="1.0.1" name="Oscat - Mathematics" fullXml="true">
		<descr>Author URL: http://oscat.de</descr>
		<libWorkspace>
			<folder name="Oscat - Mathematics" excludeFromBuild="false" excludeFromBuildIfNotDef="">
				<Pou name="ACOTH"/>
				<Pou name="ACOSH"/>
				<Pou name="AGDF"/>
				<Pou name="ATANH"/>
				<Pou name="ASINH"/>
				<Pou name="BINOM"/>
				<Pou name="CAUCHY"/>
				<Pou name="BETA"/>
				<Pou name="CAUCHYCD"/>
				<Pou name="CEIL2"/>
				<Pou name="CMP"/>
				<Pou name="COTH"/>
				<Pou name="DEG"/>
				<Pou name="ERF"/>
				<Pou name="DIFFER"/>
				<Pou name="DEC1"/>
				<Pou name="D_TRUNC"/>
				<Pou name="FLOOR2"/>
				<Pou name="FRACT"/>
				<Pou name="GAUSSCD"/>
				<Pou name="ERFC"/>
				<Pou name="GDF"/>
				<Pou name="INC"/>
				<Pou name="EVEN"/>
				<Pou name="GOLD"/>
				<Pou name="GAMMA"/>
				<Pou name="EXPN"/>
				<Pou name="FACT"/>
				<Pou name="GAUSS"/>
				<Pou name="GCD"/>
				<Pou name="EXP10"/>
				<Pou name="FIB"/>
				<Pou name="INC2"/>
				<Pou name="INC1"/>
				<Pou name="LAMBERT_W"/>
				<Pou name="MAX3"/>
				<Pou name="MID3"/>
				<Pou name="INV"/>
				<Pou name="MIN3"/>
				<Pou name="LANGEVIN"/>
				<Pou name="RDM2"/>
				<Pou name="WINDOW2"/>
				<Pou name="SIGN_I"/>
				<Pou name="SQRTN"/>
				<Pou name="MUL_ADD"/>
				<Pou name="SINC"/>
				<Pou name="MODR"/>
				<Pou name="RND"/>
				<Pou name="RDM"/>
				<Pou name="RDMDW"/>
				<Pou name="SGN"/>
				<Pou name="WINDOW"/>
				<Pou name="SIGN_R"/>
				<Pou name="TANC"/>
				<Pou name="SIGMOID"/>
				<Pou name="REAL_TO_FRAC"/>
				<Pou name="RAD"/>
				<Pou name="ROUND"/>
				<Pou name="HYPOT"/>
				<Pou name="BIT_COUNT"/>
				<folder name="type definition">
					<Definition name="Oscat_Math_Fraction"/>
				</folder>
			</folder>
		</libWorkspace>
		<globalVars/>
		<retainVars/>
		<constantVars/>
		<functions>
			<function name="ACOTH" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Arcus cotangens hyperbolicus</title>
				<descr>&lt;HTML&gt;This function calculates the arcus cotangens hyperbolic with following formula:&lt;br&gt;&lt;br&gt;
						&lt;img src= acoth.jpg /&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.2	10. mar. 2009
programmer 	hugo
tested by		tobias

this function calculates the arcus cotangens hyperbolicus

*)

ACOTH := LN((x+1.0)/(x-1.0))*0.5;

(* revision history
hm		12 jan 2007	rev 1.0
	original version

hm		5. jan 2008	rev 1.1
	improved code for better performance

hm	10. mar. 2009		rev 1.2
	real constants updated to new systax using dot

*)
]]>
				</sourceCode>
				<images>
					<image name="acoth.jpg" width="139" height="45" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CAAtAIsDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6KKKACiiigAorK03XLDWo5n06+t9Qjh
kaGRraVZFSRfvK23+L/ZrVoAKgjmjmZ1R1ZkO1tp+6alPzcGvn79j/T7bS9F+J9laQx29tD8
Q9eWOGJQqov2hflVey0AfQdFZj6pZ/2pHpxuYUv3ha4W18weY0asqtJt67csq7v9qtOgDhvA
+qS+INQ8V6q85ayXVJLCz3HCrDbKsMn/AJMLdfN/u/3a1fBviSPxf4ds9chhaG01BPtFrvfc
0lu3zRyH+7uUq23+HdXkWh3l5efsj+L9Tsgy32oWHiLVLbZ97zJ7i8mXH4yLXaeJ3udN+CE8
nhjVzoN5Do6tpd5FBHMscghHkL5bIysrNtXaq7m3YX5sUAem0V438EPG3ib4ifCiy8brqOn6
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]]>
					</image>
				</images>
			</function>
			<function name="ACOSH" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Arcus hyperbolic cosine</title>
				<descr>&lt;HTML&gt;Calculates the arcus hyperbolic cosine with the following formula:&lt;br&gt;&lt;br&gt;
						&lt;img src= acosh.jpg /&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.3	10. mar. 2009
programmer 	hugo
tested by		tobias

this function calculates the arcus cos hyperbolicus

*)

ACOSH := LN(SQRT(X * X - 1.0) + X);

(* revision history
hm		12 jan 2007	rev 1.0
	original version

hm		2. dec 2007	rev 1.1
	changed code for better performance

hm	16. mar. 2007		rev 1.2
	changed sequence of calculations to improve performance

hm	10. mar. 2009		rev 1.3
	real constants updated to new systax using dot

*)
]]>
				</sourceCode>
				<images>
					<image name="acosh.jpg" width="179" height="22" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CAAWALMDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6o3GqWdvqFtYy3UUd5dK7wWzSASSqm3
eyr1IXcuSOm4eoqr4m8R2PhPRbjVNQkZbeEqojjXdJLIzBY4o16tI7sqqo5ZmAHWvlLw7qvi
66/a717X9W0C+t/E2nfDO6urbQ7q4hliiM1+vkQQ+TK64P2MhnJVncucKuxVAPp3xB8SvCXh
PUo9O1vxPo+kahJF5yWl9fRQymMZy+xmB2jBy2MDHWph4+8Mt4bt/EP/AAkWljQbghYdUN7G
LWUlio2y7trZIIGDzXi/7Fklkv7OGhePNU1aLU/EXiqH+2/Eeu3EmZJrtiVaNyfuiEAQLGMK
nl4AHOcf4JaTaa1+0p8So7q1js9E+GVtpvh3wro7cJp0Mtos1xdBDn55cqgl+9sjK55bIB77
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
DEUQxlSSUUAdHRRRQB//2Q==]]>
					</image>
				</images>
			</function>
			<function name="AGDF" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Inverse Gundermann function</title>
				<descr>&lt;HTML&gt;AGDF calculates the inverse Gundermann function. The calculation is done using the formula:&lt;br&gt;&lt;br&gt;
						&lt;img src= agdf.jpg /&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.1	10. mar. 2009
programmer 	hugo
tested by		tobias

this function calculates the inverse Gudermannian function.

*)

AGDF := LN((1.0 + SIN(X)) / COS(X));

(* comment
the current implementation gives sufficient accuracy only up to X = 1.57 or an output > 10.
is X closer to PI/2 then the function is more and more unreliable
*)



(* revision history
hm	27. apr. 2008	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	real constants updated to new systax using dot

*)

]]>
				</sourceCode>
				<images>
					<image name="agdf.jpg" width="149" height="45" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CAAtAJUDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6KKKACiisa18QaXfJfG11G1uPsMhjuj
FMr+QyjLLJ/dIX+9QBs0VQ0/ULXVLVLqzuory2k+5NBIro3+6y1foAKKzH1Sz/tSPTjcwpfv
C1wtr5g8xo1ZVaTb125ZV3f7VadAHEaLq02ufErxIiyM1jo1vbaesW3CrdSL9omP+1+7ks/9
35v71a2i+MdC8Rapq2m6VrNlqN9pMqw39ta3CSPaSMMqkgU/K3+y3Ncp8G7k6lq3xK1Dtc+L
LiP/AL8Wtra/+29cX8IWeP8AaQ/aIaFEe4+1aGwVmwrN/ZiY3HnbQB9AUV87za18UP8Ahfln
/wAUj4T+1f8ACNTfuf8AhKrry/L+1w/Nu/s373+zt/4FVf8AaY+J3jL4fabp99ps15ZaNDpF
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]]>
					</image>
				</images>
			</function>
			<function name="ATANH" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Arcus hyperbolic tangent</title>
				<descr>&lt;HTML&gt;ATANH calculates the Arcus Hyperbolic tangent as follows:&lt;br&gt;&lt;br&gt;
						&lt;img src= atanh.jpg /&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.2	10. mar. 2009
programmer 	hugo
tested by		tobias

this function calculates the arcus tangens hyperbolicus

*)

ATANH := LN((1.0 + x)/(1.0 - x)) * 0.5;


(* revision history
hm		12 jan 2007	rev 1.0
	original version

hm		5. jan 2008	rev 1.1
	improved code for better performance

hm	10. mar. 2009		rev 1.2
	real constants updated to new systax using dot

*)

]]>
				</sourceCode>
				<images>
					<image name="atanh.jpg" width="146" height="45" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CAAtAJIDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6KKKACiiigAorKstZsNSuLuGy1C3vJr
STybiOCZZGhf+66j7rf71atABUCzRySNGHVpFwWXdyKnr58+COnW2m/tJftDRW0EVvFJqGiz
MkahQ0jacrM3+8W5oA+g6KzbrUrSzu7W2nuYYpruRkt4ZJArSsFLMqr/ABfKrNWlQBxGi6tN
rnxK8SIsjNY6Nb22nrFtwq3Ui/aJj/tfu5LP/d+b+9WnqHiRLXxNpOhJCZry+Sa5K7tix28P
lrJJ/tfNNCu3/pp/stXL/Bu5Opat8StQ7XPiy4j/AO/Fra2v/tvUdnlv2jtW837qeErP7L/w
K8uvO2/982//AI7QB1tn4y0G98UXXhuLV7KbX7W3W6uNKjuFa5hhZtqyPH95Vb/aro68Gtwv
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]]>
					</image>
				</images>
			</function>
			<function name="ASINH" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Arcus hyperbolic sine</title>
				<descr>&lt;HTML&gt;ASINH calculate the arc hyperbolic sine by the formula:&lt;br&gt;&lt;br&gt;
						&lt;img src= asinh.jpg /&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.3	10. mar 2009
programmer 	hugo
tested by		tobias

this function calculates the arcus sin hyperbolicus

*)

ASINH := LN(SQRT(X * X + 1.0)+X);

(* revision history
hm		12 jan 2007	rev 1.0
	original version

hm		2. dec 2007	rev 1.1
	changed code for better performance

hm		16.3. 2007		rev 1.2
	changed sequence of calculations to improve performance

hm	10. mar. 2009		rev 1.3
	real constants updated to new systax using dot

*)
]]>
				</sourceCode>
				<images>
					<image name="asinh.jpg" width="160" height="22" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CAAWAKADASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6K83+LHxEufCWpeEfDejtbp4j8V6hJZ
2s14CYbSCGCS4ubl1BG7ZHGQq5GXkjBIXJHiOn/tAeMbz4WeO/FmlalH4kttP8RXA0yG1igT
Up/D9jNDBf3cEZUJLMHMxG5Qh+TAywBAPqu4vbezlt45riOGS4k8qFZHCmR9pbaoPU7VY4HZ
Se1W6+Z9O8fXGrfE/wAH2Os+I9P1zRNH8K3XjC+1m50uFAvnSOmnSw7k3QyfZheF8dRCeAC2
eb+Dvx8+IWt6p8LpvF+qafp+nax4d1bxXrNrcWiRTw6crKbOR2BwrkSrhFGdkErNydqAH0/4
e8Y6H4suNWg0bVLbUpdJuzY3y2z7/s9wEVzExHRgrocejD1rdr4w/Zj8aeMn8X+BIZzZ6XD4
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]]>
					</image>
				</images>
			</function>
			<function name="BINOM" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Binominal coefficient</title>
				<descr>&lt;HTML&gt;BINOM calculates the binominal coefcient N over K for integer N and K.&lt;br&gt;&lt;br&gt;
						&lt;img src= binom.jpg /&gt;</descr>
				<returnValue>DINT</returnValue>
				<vars>
					<inputVars>
						<var name="N" type="INT">
							<descr>Input</descr>
						</var>
						<var name="K" type="INT">
							<descr>Input</descr>
						</var>
					</inputVars>
					<localVars>
						<var name="i" type="INT"/>
					</localVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.0	25. oct. 2008
programmer 	hugo
tested by		tobias

this function calculates the binomialkoefficient (N over k)

*)

IF 2 * K > n THEN
	k := n - k;
END_IF;
IF k > n THEN
	RETURN;
ELSIF k = 0 OR k = n THEN
	BINOM := 1;
ELSIF k = 1 THEN
	BINOM := n;
ELSE
	BINOM := n;
	n := n + 1;
	FOR i := 2 TO k DO
		BINOM := BINOM * (n - i) / i;
	END_FOR;
END_IF;



(*
binomialkoeffizient(n, k)
1  wenn k = 0 return 1
2  wenn 2k > n
3      dann führe aus ergebnis \leftarrow binomialkoeffizient(n, n-k)
4  sonst führe aus ergebnis \leftarrow n
5          von i \leftarrow 2 bis k
6              führe aus ergebnis \leftarrow ergebnis \cdot (n + 1 - i)
7                        ergebnis \leftarrow ergebnis : i
8  return ergebnis
*)



(* revision history
hm	25. oct. 2008	rev 1.0
	original version


*)
]]>
				</sourceCode>
				<images>
					<image name="binom.jpg" width="164" height="49" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CAAxAKQDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD7u+OfxA1mHWvDXw08FXQtPG3iwyu2oqgk
/sXTItv2q/KnI3jekcQb5WlkXOQrCu10Gz8K/CLw/oPhqG/ttJtGk+x2MeoXo868ndizfPI2
6aZ3ZmY5LMzEnJNeLfsyTj4mfG345/E64bzxDrY8D6RvG7yLPTlBmMbf3JbmaRzjglAaf+19
4Y0/xvrHwy8HSIt3e+L/ABJZ6fc28jkEaVZudTvPL/ubmsrdWYEE4jHagD3fR/F3h7xdNf2W
lazpesy2h8u8t7O6jnaEkkbZFUnbkqwwfQ+leReB9Sm+BPxbsfhbe3E0/gzxJBPeeDLi4dpH
spoQGudJZySSiofOgLYwgljyREmcXwdqlneftneLSls9nDoGh6f4N06xtAgU7oW1O4uGjBBS
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]]>
					</image>
				</images>
			</function>
			<function name="CAUCHY" version="1.0.0" creationDate="0" lastModifiedDate="1637337981" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Cauchy density function</title>
				<descr>&lt;HTML&gt;CAUCHY calculates the density function for Cauchy.&lt;br&gt;&lt;br&gt;
						&lt;img src= cauchy.jpg /&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
						<var name="T" type="REAL">
							<descr>Input</descr>
						</var>
						<var name="U" type="REAL">
							<descr>Input S</descr>
						</var>
					</inputVars>
					<localVars>
						<var name="tmp" type="REAL"/>
					</localVars>
					<localConsts>
						<const name="PI_INV" type="REAL">
							<descr>1 / PI</descr>
							<initValue>0.318309886183791</initValue>
						</const>
					</localConsts>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.0	26. oct. 2008
programmer 	hugo
tested by		tobias

this function calculates the Cauchy distribution function

*)

tmp := x - t;
CAUCHY := PI_INV * U / (U*U + tmp*tmp);



(* revision hisdtory
hm	26. oct. 2008	rev 1.0
	original version

*)
]]>
				</sourceCode>
				<images>
					<image name="cauchy.jpg" width="202" height="45" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CAAtAMoDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6K5fx9480/4d6B/ad/HcXJluYLG0srR
Vae7up5VihgjDMq7nd1GWZVUZZmVQSM3Svitpl98OZ/GV7Y6lolpbSXMNxp+oQqLuOaC4e3e
HajsruZYyibGYPuXaWDAkA7qis7Rbi9vNLtrjULJdOvZEDS2izCbyif4d4ABI744znBI5Kaz
eXOm6Xc3NnZPqdxCvmLaRuEeUA8qhbjdjOASATgEqDkAGlRWZoOtWfiTRbHVNPuPtNleQrPD
MARuRhkHB5B56HkdDWnQAUUUUAeFftleCtL8Rfs4/E/UtQW7nuNM8IaxLbRpf3EduJBZyOrv
AriORlZQVZ1Yr2Iya91ryf8AaQ8L+OPH3ws8SeDfBul6Bef8JLo2oaRd3uu6zPY/YvPgMSSR
pFaT+dje5Klo8bVAJ3Er3fhO68QXmhxS+JdM03SNYLN5lppOoSX9uoydpWaSCBmJGCQYxg8Z
PWgDdooooAKKKKACiiigAooooA8i+Ivxs1Dwv46m8K+HfDtr4i1TT9GXX9Qt7jU3tZzaNJMi
rZwpBM91OTbTfuwEAwgLguoPrtfNXxX+APij41SNpPibR/B80dtqMtxpPj+K5lXXtLgN0Zok
t4FtVEckceyMSC5IYxiRkbJWvpWgAooooAKKKKACiiigD5s/aW8L6p46+M/wU8N2PjPWvDkV
xqV5q00GmQ2LhBZWsjLcL59tKTIJri3TDEx7WJ2bsMO5+MXm/wBsfB7QZp5LqDUvF0Ud1JMF
DS/ZdNvr+NmCgLnzrKJuAACMgcAVg/DJtT+K3xgtviNqXhvWPC1rpHhn+xbfT9ctXt54765m
Sa+Cq6jekYt7WMTLlHJfYSoye2+Mvh291jw/pmq6ZbPeav4b1S31y1tY/vziMsk8S+rvbyTo
vbc654oAxv2ldc1zwf8ACXxL4r0nxTceGj4e0u51MfY7S3uHvZ403Q27iaNx5bsNpCBXYuNr
pjnc+G+l+OdPur678W67Dqttf2dpcRWK28cbadeEzG6gjKIu63Cm3EZkZ5MrKWcgqBi+P/g9
pHx0s5Lq48W+JIPD+qWEER0vTbqOK0Z4pXmhudjxM6zK7jIyFfy0WVHCADsNJsY/h/4bll1b
X9Q1yZMNPqupiI3NwxIVF2QRxx5PyqqRRrkngFmJIBy3wTmktNa+KmhBma00bxfMltuGMLdW
VnqMgHsJb6Wm/HH4y/8ACobfRpf7Q8B2Av2lXPjjxf8A8I+rbAp/cn7LP5p+b5h8u3K9d3HS
/Dfw7PoejXl3fW/2XVtZvptVvot4cxySEBIiw4JjiWKPI4Pl57119AHyp/w2p/1MP7P/AP4e
T/7119KeGNYPiDwzpOqF7GQ31rDcl9Lu/tdo29A2YZ9qebHz8sm1dwwdoziteigDhNQ+IGu2
eoXMEXwz8UX8UMrRpdW9zpQjmUEgOoe+VgpHI3KpweQDxWn4Z8Vap4gvJYb7wbrnhqNF3rca
pNYukhyBtAt7mVs9+QBx17VW8cfGDwH8MZraHxh418O+FJrpS9vHrmq29k0qg4JQSuu4A+lS
eB/it4J+Jy3r+DvF+g+LVsigum0PU4L0QF87A/lM23dtbGeu0+lAFjxd4y/4RF9DH9h6zrf9
qapDpmdHtPP+x+YGP2i4+YeXAu35n5xuXjmtnULp7SxuriG0mvpYY2kS1tygknYAkIpdlUMT
wNzKMnkgc1cooA8//wCFleIv+iU+L/8AwK0f/wCWFH/CyvEX/RKfF/8A4FaP/wDLCtzVPiL4
U0PxRp3hrUfE2j2HiPUl3WWkXV/FHd3Q55ihZg7jg/dB6GvMfihourWXxE0LUtI1/V5vEt3r
Vm9vp9vfXEWnW2ixmAagLq2Mpt5Pk+0ssxjWTzJoEUnZyAdl/wALK8Rf9Ep8X/8AgVo//wAs
KP8AhZXiL/olPi//AMCtH/8AlhXoFcnqHjhdP+J3h/webQu+raRqWri88zAiFpPYxGPbjnd9
uBzkY8s8HPABl/8ACyvEX/RKfF//AIFaP/8ALCj/AIWV4i/6JT4v/wDArR//AJYV6BXnvizW
rrWviJofguxuZrSI2smtatc20hjkFvHIscMCsOVMsjMSwOdlvIvBcEADv+FleIv+iU+L/wDw
K0f/AOWFH/CyvEX/AESnxf8A+BWj/wDywra1T4jeFND146HqPijRrDWltHvzpt1qEMdyLZAS
8/lswby1AJL4wADk1q6Hr2m+J9JtdV0bUbXVtLu0EtvfWM6zQTIejI6kqw9waAOQ/wCFleIv
+iU+L/8AwK0f/wCWFH/CyvEX/RKfF/8A4FaP/wDLCvQKKAPP/wDhZXiL/olPi/8A8CtH/wDl
hR/wsrxF/wBEp8X/APgVo/8A8sKPjL8ZvC3wN8Eal4j8Ua3pmkpDa3E1pbX95HA99LHE0nkw
hiDJI2MBVyTkcVy+k/FCfxZ8DdC+JWk6vputXmn6cmoarb+HLtbqxuisatfW0ZDMC6lZPLy2
5XRQzbWcEA6j/hZXiL/olPi//wACtH/+WFWk8fa6yqT8NvE6EjO03GlZHtxe1598erG/1vw9
/b/hjxJqreILyyhi8F2Oj31xbxSai3mSCa4RJRFc27KYS6zRlY44ZCDl+PcVuI3UMrxspGQd
3WgCaiiigAooooAKKKKACiiigD57+M2vN4W8WawvhbT/ALd4m0jw3qXjW72p5k008dtJa6dA
c9nL3OxembduMsSfV/hXfaVrHw18I6nom9tIvNGs5rOSY5ka3aFWi3HudrD8zXW0UAFFFFAH
xjD45t/E/wAXtP1jwH4n0Xxlp/jXW9GvfEPgG4jK674faCKACd5oJi1uIDbK8lvcJsLiZAS0
pB+ita+BfhPxB4yk8S3p15tSlmt55YIvE2pxWMrQFTEHs0uBbuoKjKNGVbJ3A7jn0SigDI8S
W+s3Wi3MWg31jpmrsv8Ao91qVk95BGcjJeFJomcYyMCReSDnjB+dNf8AD/xg/wCGkPAsb+Ov
BDak3hPxA0Fwvgu8EKRC80XzEaP+1iWZmMRVg6hQjgq+8FPqKsebwzpt54k0/wAQzWqtq9lZ
3FjbXO5sxwTvA8yYzg7mtoDkjI8sYxk5AKnguy8U2OkyReLdY0jXNT84lLjRdKl02FYsLhTF
Jc3BLA7ju3gEEDaMZPF6Pm1/ak8WGYcXvg3RhaE/9ML7VPPx/wCBFtnHtnoK9Xrg/iRpgsb7
RfGFtJ5epaK7QFcZW5tLh40mgbngFlhkDdmhXggkEA8K+NXxQ+GniT4nfDbSpvEGj2mkab4w
vL3xFf30ggjt72ztbi3htJ5JAAkkkrLsRiDJHBlNyEE/SfhHR9L0XRQmj2LafZXNxc6kYWDK
xluZ5LiZyGOVLyyyOVOMFsYGMDeooA898UaL8UrzXLmXw54y8I6VozbfItNV8J3V9cJ8oDbp
k1OFWy24jEa4BA5xknhXRfihaa5by+JfGPhLVdHUN51ppPhS6sLhztIXbNJqU6qA2Cf3ZyBj
jOa9CooA8E/bK1zTrL4U6Zo2saha6Ro3iTxDpmj6jqV/KsVtbWZnE1yZZGwiBoYJYwXIBaRV
6sAfV4/FWmaj4NuPEEySLon2aa4f7VFsL26hiXKN/CyjcM4yrDIHSukrjPGkf/CQappnhWVm
isdSgnurxkPzSwwPCGt/ZZPNAY/3A64y+5QDzP4d/s66P4k+D/w1j8Yv4ji8Qaf4Q03RrwaX
4o1TTEbZboJUeO2uIlYl92Sy5OAD0AHvMNvDbwxxRxLHHGoVVVMAADAAHpU1FAH/2Q==]]>
					</image>
				</images>
			</function>
			<function name="BETA" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Euler Beta function</title>
				<descr>&lt;HTML&gt;BETA computes the Euler Beta function:&lt;br&gt;&lt;br&gt;
						&lt;img src= beta.jpg /&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
						<var name="Y" type="REAL">
							<descr>Input</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.0	26. oct. 2008
programmer 	hugo
tested by		oscat

this function calculates the beta function for real number > 0.

*)

BETA := GAMMA(X) * GAMMA(Y) / GAMMA(x + y);


(* revision history
hm	26. oct. 2008	rev 1.0
	original version

*)
]]>
				</sourceCode>
				<images>
					<image name="beta.jpg" width="313" height="60" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CAA8ATkDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6KKKACiiigAooooAKKKKACiiigAoooo
AKKKKACvL/jN8bNK+C+n2Mt1YX+varfNItno2lrG1zMsa7pJB5jqqqq/eZm/iWvUK+WfCt1H
8Uv23vGN1LD9p03wLocOkxrJ8yrcXcjNJ8v+7brQA/43fEDTfjN+xd4k+Inhq/1XTbVtDvLy
1VZGt23LuVlkX+LaytX07b/8e8f+6tedfFb4I6X8WPAs3g+fVdV8OaFcRyQ3Ft4fkht/Ojb7
0bbo2+X/AHdtdJ4J8Kz+DfD8Om3Gvat4lkjZmOoa3JHJctu/hZo4412j/doA6eiiigAooooA
KKrfaIWmMIkTzlXLR5+bbVmgAooooAKKKKACiiigAooooAKKKKACiq09xFbqplkSIMwVdzbc
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]]>
					</image>
				</images>
			</function>
			<function name="CAUCHYCD" version="1.0.0" creationDate="0" lastModifiedDate="1637338109" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Distribution function after Cauchy</title>
				<descr>&lt;HTML&gt;CAUCHYCD calculated the distribution function after Cauchy.&lt;br&gt;&lt;br&gt;
						&lt;img src= cauchycd.jpg /&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
						<var name="T" type="REAL">
							<descr>Input</descr>
						</var>
						<var name="U" type="REAL">
							<descr>Input S</descr>
						</var>
					</inputVars>
					<localConsts>
						<const name="PI_INV" type="REAL">
							<descr>1 / PI</descr>
							<initValue>0.318309886183791</initValue>
						</const>
					</localConsts>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.0	26. oct. 2008
programmer 	hugo
tested by		tobias

this function calculates the Cauchy distribution function

*)

CAUCHYCD := 0.5 + PI_INV * ATAN((X - T) / U);



(* revision hisdtory
hm	26. oct. 2008	rev 1.0
	original version

*)
]]>
				</sourceCode>
				<images>
					<image name="cauchycd.jpg" width="260" height="41" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CAApAQQDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6K8n+L3x9j+EPiTwnokngrxN4ovPFF0
bHTjoJsCr3IR5DEwuLuFlxHGzl9uwDGWBOKTSfjpfXHjnw/4Y1z4YeM/CUuuPNFZ6lqn9mz2
fmRQvMUd7S9nKMUjfbuUZxQB6zRXMw+LlvvGlz4fsbb7ULGBZdRvPNCpatIMxQgYO6RgCxXj
apUn76g9NQAUVz6+Jkj8XHQbqB7aea3N1YzFwyXUaFRKB3V0Z1yp6q6kE/ME6CgAooooAz9Y
0uHXNLubC5e5jguYzHI1ndy2swB7pLEyuh/2lYEdjXkv7Pfh+w8K+LPjZpWmwtDZW/jOHy43
leVstoGjuxLuSzEszMSSSSSa9b1aW+h0u7k0y3t7vUlhka1t7udoIZZQp2I8io5RS2AWCOQC
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]]>
					</image>
				</images>
			</function>
			<function name="CEIL2" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<descr>&lt;HTML&gt;The function returns the smallest integer value CEIL2 greater or equal to X.&lt;br&gt;&lt;br&gt;
						Example:&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;CEIL2(3.14) = 4&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;CEIL2(-3.14) = -3&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;CEIL2(2) = 2&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;</descr>
				<returnValue>DINT</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.3	10. mar. 2009
programmer 	hugo
tested by		tobias

This is a rounding function which returns the smallest possible integer which is greater or equal to X.
ceil2(3.14) = 4
ceil2(-3.14) = -3

*)



CEIL2 := TO_DINT(X);
IF TO_REAL(CEIL2) < X THEN
	CEIL2 := CEIL2 + 1;
END_IF;


(* revision history
hm	21. mar. 2008	rev 1.0
	original version

hm	4. apr. 2008	rev 1.1
	added type conversion to avoid warnings under codesys 3.0

hm	30. jun. 2008	rev 1.2
	added type conversion to avoid warnings under codesys 3.0

hm	10. mar. 2009	rev 1.3
	use correct statement real_to_DINT

*)

]]>
				</sourceCode>
			</function>
			<function name="CMP" version="1.0.0" creationDate="0" lastModifiedDate="1634721284" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Compare N points</title>
				<descr>&lt;HTML&gt;CMP compares two REAL values if the frst N points are equal.&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;In the CMP function note that the dual coding of numbers a 0.1 value in the decimal system can not be necessarily always displayed as 0.1 in the binary system.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;So it may happen that 0.1 is represented with a value less or greater than 0.1  because the resolution in binary coding doesn't allow exactly 0.1 value&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;&lt;b&gt;For this reason, the function can not detect for 100% the diference of 1 value in the last decimal position.&lt;/b&gt;&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;In addition, note that a data type REAL with 32 bit has only a resolution of 7 - 8 decimal places.&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;&lt;br&gt;
						Example:
						&lt;ul&gt;
						&lt;li&gt;CMP(3.140,3.149,3) = TRUE&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;CMP(3.140,3.149,4) = FALSE&lt;/li&gt;&lt;br&gt;&lt;br&gt;
						&lt;li&gt;CMP(0.015,0,016,1) = TRUE&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;&lt;b&gt;CMP(0.015,0,016,2) = FALSE&lt;/b&gt;&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;</descr>
				<returnValue>BOOL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
						<var name="Y" type="REAL">
							<descr>Input</descr>
						</var>
						<var name="N" type="INT">
							<descr>Number of digit to be compared</descr>
						</var>
					</inputVars>
					<localVars>
						<var name="tmp" type="REAL"/>
					</localVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
	version 1.1	10. mar. 2009
	programmer 	hugo
	tested by		tobias

this function checks two inputs x and y if they are identical with the first N digits
example : cmp(3.141516,3.141517,6 is true.

*)

tmp := ABS(x);
IF tmp > 0.0 THEN
	tmp := EXP10(TO_REAL( TO_INT(FLOOR(LOG(tmp)))   -N+1)    );
ELSE
	tmp := EXP10(tmp);
END_IF;
CMP := ABS(X - Y) < tmp;


(* revision history
hm	12. mar. 2008	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	added type conversion for compatibility reasons
*)


]]>
				</sourceCode>
			</function>
			<function name="COTH" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Hyperbolic cotangent</title>
				<descr>&lt;HTML&gt;COTH calculates the hyperbolic cotangent by the following formula:&lt;br&gt;&lt;br&gt;
						&lt;img src= coth.jpg /&gt;
						&lt;br&gt;
						For input values larger than 20 or less than -20 COTH provides the approximate
						value +1 or -1. Corresponding to an accuracy better than 8 digits and is thus below
						the resolution of type REAL.</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.4	10. mar. 2009
programmer 	hugo
tested by		tobias

this function calculates the cotangens hyperbolicus

*)

IF X > 20.0 THEN
	COTH :=1.0;
ELSIF X < -20.0 THEN
	COTH := -1.0;
ELSE
	COTH := 1.0 + 2.0 / (EXP(X * 2.0) - 1.0);
END_IF;


(* revision histroy
hm		12.1.2007	rev 1.0
	original version

hm	1.12.2007		rev 1.1
	changed code to improve performance

hm	8. jan 2008	rev 1.2
	further improvement in performance

hm	10. mar 2008	rev 1.3
	extended range of valid inputs to +/- INV
	changed formula for better accuracy

hm	10. mar. 2009	rev 1.4
	real constants updated to new systax using dot
*)
]]>
				</sourceCode>
				<images>
					<image name="coth.jpg" width="93" height="42" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CAAqAF0DASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6KKKACisTVNetNDhle5mw8dvLc/Zog0
k8kce3zDHGvzNt3L91f4l/vVS+HvjbTfiX4F0HxXorSPpOtWUN/ZvcR+XJ5Mihl3L/CdrUAd
RRRXmn7QmveI/DPwR8d6v4Rt5LrxJY6Pc3FjHChkk8xY2+ZF/iZfvKv8TLigC18ZvE1h4V8B
X17qnidvCFuWWNL+Ge3gkaVvuRJJcK0aszcZZfy614pqXxL1Hw/r3hSa/wDiJb614X1Kz0ux
8Ua3pU0f2XSNQk2tBNDIv3Yb5v3bbt3lq0LL5aybq6j9mPxNpfi658Qaz4Z+Jv8AwsDw9eW9
nItov2iaPSptsm5fOuLiaRZJF274Wb935attXzPm+hKAK89zHbwvNLIscSLuZ2bChfWorO9h
vreG4t5UnglRXSSNtyurfdYN3HNcR8X7HxbeeE9Vbw9rWjaVarp1x9qj1PR5rySQeW3+raO6
h8v8Vas34B2Xiy1+HfhqTX9Z0bU7BtGs/ssGm6PLZyx/uV+/I13Msny/3VX+lAHSeF/iRofj
DxN4m0DTbiebVPDk0NvqdvNaTQ+TJInmR7TIq7soVbcu5fmHzV2VfO/wV1qwvv2nP2hrW3vI
J7iO80XdHHKrOu3T1Vvl7bW+X/er6IoA8B/ac+ID/D+++Gx1nVLnQ/h/f+IGtfEes291Ja/Z
4/sszWqyXEbK0MTXHk7pNy/dVWbazbuDbxPZx+M/CPhbVviDrsfwv1Lwzqd1pXiy91ySxnvr
5bxSqteRtG0nl2rbodzfvI1aRvM27q+tJIlmRkdVdW+8rCiSGOUAOqsA2fmHegD4Y+FGualJ
8Vvhb4j+KOoz6X4jv/hffFp7y+mtI7uaG8h+Zodyrua32zSR7f8AaZf3eVm/ZH8TW/hu+/Z1
0yy8V3d7B4m+G901/pM+rNNbJcW39n+S0duW8uFlVrqP92q7trbtzKzV9y/xU6gDwjx1pPxC
n8WajJpX/CZf2az/ALldN1fSYbfG3+FZrdpF/wCBNXVeG/8AhNtK+HryQ6dJqnijzsRWfi3V
oYRIvmLzJdWdvIqjZuZdsLfN8p+9uHptZerapZ+HdLvNS1C6js9Os4ZJ7i4mbbHDGq7mZm/h
VVBoA8k8QfEb4p+B9Hn1PWPBfw20fTITukubnx/eRxqT7/2NWQ3xy8eNNeQxeH/hrNJaw2tx
MsPxAvZNsd0223f5dH+7I3yxt/Fj5a7C/wDiI/xC0nWdL8BSQzeKdPEC3tpr4u9Ins4Z1YrM
qyWrSbmVZPLby9u5W/ustcjqHwZ8T/2z4I13Q9L8OaJf+DYLXTtP0sajNLa3Viyqt3bzTNb+
Z+7VVa3ba3zR7m2+YyqAdd/wknxv/wCieeAP/C8vv/lNR/wknxv/AOieeAP/AAvL7/5TV6tR
QB5T/wAJJ8b/APonngD/AMLy+/8AlNXq1eSfDX4heIPFHxc+KvhfVhYvY+GLvT4tPktLdo2a
Oe1WdvM3SNuZWbbuXb937tet0AFFFFABRRRQAV598cPhw/xe+Evi3wZFfnTLjW9Olso7xV3e
TIy/KzL/ABLu27l7rXoNFAHj/wADfBviXw7b3l34t8LeC/DesSQw2sj+DlZlvPL3FppHaGNl
Vmb5Yfm2/N8zbvl9goooA5PxZ8MfCHxAmt5fE3hTRPEU1urLDJq2nQ3TRq33gvmK22k8J/C7
wb4DmuJ/DXhHQ/DtxcLsmk0nTYbVpB6MY1XdXW0UAeR/Df4d+JPC/wAZvir4n1P+yjo3iibT
5dPW0u5JLhPs9qsLCVGhVV3bd3ys1euUUUAf/9k=]]>
					</image>
				</images>
			</function>
			<function name="DEG" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Radians to degrees</title>
				<descr>&lt;HTML&gt;The function converts an angle value from radians to degrees.&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;This takes into account the input may be not larger than 2pi&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;If RAD is greater than 2pi, the equivalent to 2pi is deducted until the input RAD is between 0 and 2pi.&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;&lt;br&gt;
						Example:
						&lt;ul&gt;
						&lt;li&gt;DEG(π) = 180 Grad&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;DEG(3π) = 180 Grad&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;DEG(0) = 0 Grad&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;DEG(2π) = 0 Grad&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="rad" type="REAL">
							<descr>Input</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.2	10. mar. 2009
programmer 	hugo
tested by		tobias

this function converts degrees into Radiant
execution time on wago 750 - 841 =  10  us
*)

DEG := MODR(57.29577951308232 * RAD, 360.0);

(* revision history
hm	4. aug 2006	rev 1.0
	original version

hm 16. oct 2007	rev 1.1
	added modr statement which prohibits deg to become bigger than 360

hm	10. mar. 2009	rev 1.2
	real constants updated to new systax using dot
*)
]]>
				</sourceCode>
			</function>
			<function name="ERF" version="1.0.0" creationDate="0" lastModifiedDate="1634730482" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Error function of X</title>
				<descr>&lt;HTML&gt;The ERF function calculates the error function of X.&lt;br&gt;
						&lt;br&gt;The error function is calculated using an approximation formula, the maximum relative error is smaller than 1,3 * 10-4 .</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
					</inputVars>
					<localVars>
						<var name="x2" type="REAL"/>
						<var name="ax2" type="REAL"/>
					</localVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.3	10. mar. 2009
programmer 	hugo
tested by		tobias

this function calculates the erf (error) function.

*)

x2 := X*X;
ax2 := 0.147 * x2 + 1.0;
ERF := SQRT(1.0 - EXP(-X2 * ((0.27323954473516 + aX2)/(ax2)))) * TO_REAL(SGN(x));




(* revision history
hm	7. apr. 2008	rev 1.0
	original version

hm	30. jun. 2008	rev 1.1
	added type conversions to avoid warnings under codesys 3.0

hm	25. oct. 2008	rev 1.2
	new code using new algorithm

hm	10. mar. 2009	rev 1.3
	real constants updated to new systax using dot
*)
]]>
				</sourceCode>
			</function>
			<function name="DIFFER" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Difference by more than X</title>
				<descr>&lt;HTML&gt;The function DIFFER is TRUE if in1 and in2 differ by more than X from each other.&lt;br&gt;
						&lt;img src= differ.jpg /&gt;&lt;br&gt;
						&lt;br&gt;
						Example: &lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;Differ(100, 120, 10) returns TRUE &lt;/li&gt;&lt;br&gt;
						&lt;li&gt;Differ(100,110,15) returns FALSE &lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;</descr>
				<returnValue>BOOL</returnValue>
				<vars>
					<inputVars>
						<var name="in1" type="REAL">
							<descr>Value 1</descr>
						</var>
						<var name="in2" type="REAL">
							<descr>Value 2</descr>
						</var>
						<var name="X" type="REAL">
							<descr>Minimum difference in1 to in2</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.1	16 mar 2008
programmer 	hugo
tested by		tobias

this function checks if in1 differs more then x from in2
the output is true if abs(in1-in2) > X

*)

DIFFER := ABS(in1 - in2) > X;

(* revision history
hm		8. oct 2006		rev 1.0
	original version

hm		16. mar 2008	rev 1.1
	improverd code for performance

*)
]]>
				</sourceCode>
				<images>
					<image name="differ.jpg" width="153" height="19" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CAATAJkDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9TZpkgjeSR1jjQFmZjgADqSfSvGT+0Ms3
jTx7p2nQ6Tqui+GtLs5re9j1aKE6hqNwJmSyWSQrErbYlO4ucecmehq18etF8Va9rnw9tdL8
PzeJfCUerSXPiHT7a6hhaVUt3NoJBK6B4BcGN3UEn92nyuMqfHNJ+D3xC1DwhY2mt+ElTUPE
/wAUG8TeKo47u2MS2VvK0toP9YcxE2mnoQNz48wlM8EA9R+If7T2h+Ftc1rQ7DVPD6aroGjt
rWtS6xqYittOUNsjt5GjDt50jBxhVJULnaxZFfq/AfxRm8ReGNO8V64dH8PeGdZsre80xp9Q
H2hTIXPlTZAj3eX5LfIxwzSJghA7/OniDw9efEnwv42dYGNz8YvHNvolrJEeR4estscswB/5
Zvb2l7ID0b7Wn94Z7jxH8JPEfjT43ePY/FWhaxq/gzV7Sz03SZLG/s4bBdN8lftdpPub7TD5
kxcv5C/vUEasSFwAD6C/4S3RDdT2w1rT/tUM8dtLD9pj3xzOSEjZc5DMQcKeTg4rX85BwXUH
614b8J/ggkni7xr448c6BZS+INX8TPfaXbXUUM/9nWtqqWtjIm0sqytFAsu5TlfNxwQ1V9Y/
Zdt9X1a9vzB4DzdTyTf6R4DtZpPmYn5pDJl255Y9TzQB1Pxg8XN4R8TfDq+kvri00ldTvpNQ
WGRgssEWk30pDqDhwGjVgD3UHqBVrSPGl74f+DVn4o1ox3OvX1guof2fPexWqSXUsfmJZxSS
sqIASI1JI4Xc2SWJ85+Knwxa38N/DbwJbNpsL3V3rFjG2maemn2qtPo+pgFYEJCDMnODycnq
aseNtH1/4sfCv4OWOmaK99pd1q2k6h4iheWKMW0FrGbny5Vdgf8Aj7ht43VQzAB/lOMUAe1L
4y0RfMSfVtPtriCSKC4t5LyLfBNIcJE+G4ZmyAO5HGa5j4pfE6+8BeIfh/pOnaPBrVz4q11d
JKPemCS2iEMk81wqCNvMEcUMhIJXkqM818/+IP2dvFfijWNS1/VvDcd/qfiv4kWt9fwSTW//
ABLdBsCPsp3bzzN9iti/llnC3DDbkOD67deG/Efij9qbStc1Hw5dW/g/wz4furfS9TluLYpN
qN1NGJnEaymUBYIVVSyD/WydOCQD2iud8ceKovBvhm/1UrDcXEMTG1s5ryK0F3PtJSBZZWVF
ZyMAscDOawLz4L6DfXk91JqXi1JJpGkZYfGGrxICTkhUW6CqPRQAB0ArkPjT8N9X1fw78PPC
Ph/Tb7W/D6eKbO+1qTUNTNzItpbO92nmy3MjSSK1zHbKcFyEJAUgBaAPUl8ZaIvmJPq2n21x
BJFBcW8l5FvgmkOEifDcMzZAHcjjNeffHr4zeIfgrpKeILfwVH4h8K2s1tHql4uqiC6jWadY
Qbe38p/PZWdSVZ4ydwC7jnHjPiD9nbxX4o1jUtf1bw3Hf6n4r+JFrfX8Ek1v/wAS3QbAj7Kd
288zfYrYv5ZZwtww25Dg+p3GreM/G3xTsrPW/hbrlt4X0zUQ9jeXWpaYLBmj+Zb6ZY7p53ZS
P3MPk4ViruQ20wgEf7QXi3WPCOhfECztb+5txfeD77V9OuIZiktncWuyKYowwygi4tmXB4ZX
P8XHp998RfDWkeKrbw5qGtWmna5dKr21neP5LXQJIAhL4EpGDkISRxkDIrxP9qi3k1L/AISi
aEM0Oj/DnXVu26BWvJbT7OPfIsbn/vkV6h8SPDPijx0JtAtovDNt4YuIgLm61izbU5pSTyi2
jBIlxwRI7yDPWPjkA9DryHx58dG+HHxh8M+E9d0yzs/Dmvade3dv4il1JgyzWqxtJbm38k5Z
lk3KfM+YKwAyMHf+Gfwvs/g14VutO0y/1zxACzThNRvFkbOCRFBF+7ggTsEjWNBnn1rxb4ze
DPiN8RrPwd4+h8Hagvibwr4rtb/SfBq3tgHSyWUx3Mk85n8ppZYGdgFciP5FAJ3uQD3r4c+I
vEvijR31DxH4ah8LGWRjaWa6g1zO0G4hHmUwxiJ2UK3lguV3YJBBFddVa1mee3ikeGS3dkDN
DKVLxkjJU7SRkdOCR6E1ZoAKx9a8PaX4qt1s9Z0611O0jmS4SG6hWRVkRgyOAR1B5BoooAh0
3wfoWh6rcahp2jWFjf3LBZrm3tkSRwIo0ALAZxshhX6RIOijG9RRQAUUUUAZupaHYanqWk3l
1bJPc6bO9xaSN1hkaJ4mZfcpI6/RjU9pY2+nmZbaFYFkkMzqgwC7HLNj1JyT6kk9SaKKALdF
FFABRRRQAUUUUAYereFdI13TdZ0+/wBPhuLPV42jv4mXAuVKCMhyOT8gC/QVuUUUAFFFFABR
RRQB/9k=]]>
					</image>
				</images>
			</function>
			<function name="DEC1" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Count from N-1 to 0</title>
				<descr>DEC1 counts the variable X from N-1 to 0 and then starts again at N-1,
						so that exactly N different starting values are generated at N-1 through 0.</descr>
				<returnValue>INT</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="INT">
							<descr>Number of values X can be</descr>
						</var>
						<var name="N" type="INT">
							<descr>The variable which is incremented</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.1	27. oct. 2008
programmer 	hugo
tested by	oscat

This is a decrement function which decrements the variable X by 1 and if 0 is reached, it begins with N-1 again.
_dec1(X,3) will generate 2,1,0,2,...

*)

IF X = 0 THEN
	DEC1 := N - 1;
ELSE
	DEC1 := X - 1;
END_IF;


(* this is a very elegant version but 50% slower
X := (X - 1 + N) MOD N;
*)


(* revision history
hm	13. oct. 2008	rev 1.0
	original version

hm	27. oct. 2008	rev 1.1
	added statement to return value for compatibility reasons

*)
]]>
				</sourceCode>
			</function>
			<function name="D_TRUNC" version="1.0.0" creationDate="0" lastModifiedDate="1629897581" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Integer value of a REAL value as DINT</title>
				<descr>&lt;HTML&gt;D _TRUNC returns the integer value of a REAL value as DINT.&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;The IEC routine TRUNC() does not supports on all systems a TRUNC to DINT so that we have rebuilt this routine for compatibility.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt; Unfortunately, even REAL_TO_DINT does not give on all systems the same result.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;D_TRUNC reviewes what result the IEC functions provides, and uses the appropriate function to deliver a useful result.&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;&lt;br&gt;
						Example:
						&lt;ul&gt;
						&lt;li&gt;D_TRUNC(1.6) = 1&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;D_TRUNC(-1.6) = -1&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;</descr>
				<returnValue>DINT</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[

(*
version 1.2	10. mar. 2009
programmer 	hugo
tested by		oscat

d_trunc truncates a real to a dint 1.5 will be 1 and -1.5 will be -1
d_trunc is necessary because many systems do not offer a trunc to a dint
also real_to_dint will not deliver the same result on different systems

*)


D_TRUNC := TO_DINT(X);
IF X > 0.0 THEN
	IF TO_REAL(D_TRUNC) > X THEN
		D_TRUNC := D_TRUNC - 1;
	END_IF;
ELSE
	IF TO_REAL(D_TRUNC) < X THEN
		D_TRUNC := D_TRUNC + 1;
	END_IF;
END_IF;


(* for systems that support a dint truncation this routine can be replaced by trunc() *)


(* revision history
hm	21. mar. 2008	rev 1.0
	original version

hm	31. oct. 2008	rev 1.1
	optimized performance

hm	10. mar. 2009	rev 1.2
	real constants updated to new systax using dot
*)
]]>
				</sourceCode>
			</function>
			<function name="FLOOR2" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Largest integer value less or equal than X back</title>
				<descr>&lt;HTML&gt;The function floor2 returns the largest integer value less or equal than X back.&lt;br&gt;
						&lt;br&gt;
						Example:&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;FLOOR(3.14) = 3&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;FLOOR(-3.14) = -4&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;FLOOR(2) = 2&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;</descr>
				<returnValue>DINT</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[



(*
version 1.1	4. apr. 2008
programmer 	hugo
tested by		tobias

This is a rounding function which returns the biggest possible integer which is less or equal to X.
floor2(3.14) = 3
floor2(-3.14) = -4

*)


FLOOR2 := TO_DINT(X);
IF TO_REAL(FLOOR2) > X THEN
	FLOOR2 := FLOOR2 - 1;
END_IF;

(* revision history
hm	21. mar. 2008	rev 1.0
	originlal version

hm	4. apr. 2008	rev 1.1
	added type conversion to avoid warnings under codesys 3.0
*)
]]>
				</sourceCode>
			</function>
			<function name="FRACT" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Fractional part of X</title>
				<descr>&lt;HTML&gt;The function Fract returns the fractional part of X.&lt;br&gt;
						&lt;br&gt;
						Example:&lt;br&gt;
						&lt;ul&gt;&lt;li&gt; FRACT(3.14) results 0.14.&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;
						&lt;ul&gt;
						&lt;li&gt;For X greater than or less than +/- 2.14 * 10^9 Fract always provides a zero return.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;As the resolution of a 32bit REAL is a maximum of 8 digits, from numbers larger or smaller than +/- 2.14 * 10^9 no fractional part can be determined, because this part can also not be stored in a REAL variable.&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="x" type="REAL">
							<descr>Input</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.3	10. mar. 2009
programmer 	hugo
tested by		tobias

this function returns the fraction of a real number
fract(3.14) = 0.14

*)

IF ABS(x) < 2.0E9 THEN
	FRACT := x - TO_REAL(D_TRUNC(x));
ELSE
	FRACT := 0.0;
END_IF;

(* revision history
hm	4. aug 2006	rev 1.0
	original version

hm	11. mar 2008	rev 1.1
	added dint_to_real for compatibility reasons
	now returns 0 for number > 2e9
	changed input to x

hm	21. mar. 2008	rev 1.2
	use D_trunc instead of TRUNC for compatibility reasons

hm	10. mar. 2009	rev 1.3
	real constants updated to new systax using dot

*)
]]>
				</sourceCode>
			</function>
			<function name="GAUSSCD" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Distribution function for normal distribution</title>
				<descr>&lt;HTML&gt;The function GAUSSCD calculated the distribution function for normal distribution using the following formula:&lt;br&gt;
						&lt;img src= gausscd.jpg /&gt;
						&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt; The normal distribution is the density function normally distributed random variables.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;With the parameters U = 0 and SI = 1, it follows the standard normal distribution.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;The distribution function ( Cumulative Distribution Function ).&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input value</descr>
						</var>
						<var name="U" type="REAL">
							<descr>Locality of the function</descr>
						</var>
						<var name="SI" type="REAL">
							<descr>SIgma, spreading the function</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.1	10. mar. 2009
programmer 	hugo
tested by		tobias

this function calculates the gaussian cumulative distribution function

*)

GAUSSCD := (ERF((X - U) / (SI * 1.414213562)) + 1.0) * 0.5;



(* revision hisdtory
hm	6. apr. 2008	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	real constants updated to new systax using dot

*)
]]>
				</sourceCode>
				<images>
					<image name="gausscd.jpg" width="191" height="45" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CAAtAL8DASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6KKKACiiigAooooAKKKKACiiigAorxO
x8Ua9b/taaj4Wl1ea48NDwXBqsOnMkYWG6a+kiZgyr5h3LGv3mb+KvbKACiiigAooooAK429
8YXFn8UNG8Li0je21LR77U1vPP8AmVraazj8vZt6MLzdu3fw9Ku65eeJbe7UaRpOk3tqIzmS
91SS1YN/d2rbyfL0+bd/wGvK/GXijxHB8aLCLStA8Dah4hh02a301dU8d3ljeyW8vkyXK/Y4
9Pkj/wBZCvzbmbbErfL8ygA9c8aa83hnwfr2soiyPp9jPeKrdG8uNm/9lrl/ih40l+EPwvm8
QSSfb4NHNr9unumbebfzY455uPvOsZaTb/Ey7f4q868Xal8Ubix+IEXifTdKsPCTeF96f2fI
0zR3DLIJ1EjbWZVXd83lruURt5cLMy1v/Fbw7408Yaxf2UPgTwt4i0BrWayhfVvGuoac00c8
PlzeZaw6fJGrfNJGr+YzbWbay72WgDto/HEGg6fFL4vv9L8N3N3JKbW3ur2ONvJVhtDMzbWk
2su7blVZtu5uGatq3j+RvF3grR9D+x6rDryXV5NdRyb1is4I13TRsvyt++lt4/8Attu/h2t5
9q3xF+Jfw50eyh1Twr8PdMsIYtsTX/xD1CRvLjX5naR9HZmVVwzSMfl6s1U7jUPiJ8QtU/tC
LwL4GvL7RJLjTGudP+I+qQSW7OY/tFuzR6Sp6xwsVb+6rUAel3Xiq+fwXDrsmyEC/jmRrfdt
ax+1KvmNu/vW58zafu7v9ndR8IdH8U+HvBKweM7iCfxBJqepXsotb6W9hghuL64nt7eOaSON
mWGGWKEZjUAR4ChQtcd4l1L4hRfDXxnD4h8JeFvDul23h28a1l0HxDPqEiyrD8kfkyafbqq7
d3zbv4VXb82V9xoA5P4ieOtE+GPg/UfFHiG6a00qw2GSSONpHZnkWOONVXlmaR1VV/vMtcXD
+0h4bPiLxJo2oafrWkan4d+yx31tdWqyZmuvL+ywxtC0iyTSeYu2NW3deKoftSfbdV+HS+GY
bFhHrlzHbSaxPp8t9baWI83C3E0cP7z70KqrKy7ZGVty7V3cP4I+HHif4gW2m6hPZ6T4S1vw
34u/thtSSxury18S/wDEva3Fwy3LR3G+NbjarNJIqtbLt8xdu0A9BX9pTw2jXaT6ZrVvNaeJ
rPwnNG1rG23ULjydq7lkZWVftEbMyt3bbu2tWhffH7wtbyXcERur2aHxKPCUKR7E+1al9nWZ
oY3kkVeFLLlmX95Gy/e27uF0f9lzVNN0vQLRvG32m403xpfeLrq8uNIVpLyS4S5Ee795t8yH
7SrLIdyboI/3fy7aox/sl6lN8L7/AOHd94vs7zRL99QuriU6OwuVvri8a6ivo5vtG5ZoW+6z
btzf7K7aAPQ2+P2jnUdC02LStbl1LVNPsNWOnLBGlzaWt3cC3hkmjaQN/rG2ybd3l43NtrpP
FHxMsvCeqfYLjSPEV83liTzdL0K6vIeT/wA9I42Xd/s1y9x8HdQ1r4qaH4z1XXYbmbw/f3U2
mC3sTDOLS4tfIeylk8zEke7bN93/AFiL93bXUeKvhH4W8Zal/aGr2E9zeeWse6O+uIV2r/sx
yKtAEmj/ABH0nUdD1TWbqPUNB0zTY2nu7vxFZTabHDGqlmkZrhUGxVVmZvurXOf8NZfBD/os
ngD/AMKix/8AjtdDo3wt8NaHoOq6PBpSy6TqUbQXtjqEkl5DcRspVkZZmbcrKxVl6NXk3jD4
Vfs7eDtcj0S4+DfhG/1iS1bUDY6V4It7yaO1VtjTMsdu2F3fKB95sNtVtpoA7j/hrL4If9Fk
8Af+FRY//HaP+Gsvgh/0WTwB/wCFRY//AB2vNNF8F/sx+IPEPhXRdO+FHg25vfE2kf27pe3w
RBtksfl/fs32fbGv7yP/AFm0/OvFel/8Mm/BD/ojfgD/AMJex/8AjVAHmUfxa+EMfx/uPiR/
wv34ctZyeHo9A/sb+17PzFVbhpvM+0fav7zN8vl9K9N/4ay+CH/RZPAH/hUWP/x2j/hk34If
9Eb8Af8AhL2P/wAar5k+O37H+h6tr2teIvCd/wCB/hd4W0dINNk0y1+E2meIJLu4yredHuj8
zezXEcPlxqfmj/vGgD6b/wCGsvgh/wBFk8Af+FRY/wDx2j/hrL4If9Fk8Af+FRY//Ha+Ivhj
+xTN8XdMvrzw38XfA9wdPu2sb+zvPgJodndWVwqqzQzQzRrJG2GH3lrtP+HY/i3/AKKn4A/8
Md4e/wDiaAPpHx9+1N4R8C654RsS1zqcHiORDZ6hY2800N3A9pNPHJZtHGy3jM0cMflwtu/0
iNvu1ufEb48eHfhimmJqEN3cahf2U2pQ6bG0EFytvF5fmMftEka7t0sa+Xu8xmY7Vba22t4o
/Zp+HHiy+0ae98K6ei6WscEdvb2kawvapa3FrHasu35YEW4Zljj27Wjjb+Gs/wCInwT1vWPH
HhTxh4D8U2/hHxBoWnzaMy6hpralZ3enzNExikj86NtytDGyssnY5+9QB6X4L8Xad488J6N4
j0mRptL1a0hvbV5F2sY5EVl3D+FsN0rl9V0XxDrXxQ0a8m0rRZ/DOks9xaXbalMt7FdPDJC0
32f7Ptb93I0a/vl+WSRvm+VV7HQ7C403SbS2vLuXULuKNRNdyoFaaTHzSFV+Vdzc7V4Fa9AH
O+PNFl8S+B/EWkW5Xz9Q064tYy33d0kbKv8A6FWnp19HqOn2t5GrLHcRrKquNrBWXd81X6KA
PI/ij4D8TeL/ABJoF5pkGm2z6PcW9xa6tJeSRzBWm231rJD5bLJDNbqq7S33trfejVq6D4Q+
E9S8F+BbSw1g2s2uzXF1qGpSWUjSQNdXNxJcTCNmVWKhpCF3Kvy7a7yigDk/iJYvrHhltMVd
41C4gtZEX+KFpl87/wAg+Y3/AAGusoooAKKKKACiiigAooooAK+NPjx8SNF/4ShfiV8PPENu
fij4P1ZfCN54X85Wk8Q2sl1Gslj5P3tyszSRyKvytHJu+Xdt+y6qG1ha4EvlL5yKdsmORu60
AfO/wM1PR/iR+0N8WfFOj3Vheab4bi0/wRpf2GVdsMcMZurraq/wtNcLHu/6duPu1zvj7wf8
ZNQ/aS07UtImvE8Lra6gsW28h85bdrjTfOjjuPsrR2/meWrLDJ5kjLBcbZI93y/WtFAHl3xg
8T6v4Ft9F8WRah5HhrS72M+ILFoF2vYzboZLhpGXcot2eOY7dv7uKXdu3LtrXfxG8OfCb4PR
eMPGF9Fo+nPu1KSS8Kx7J7mRplhXd33TbF/8exzXpN9pNprmm3Vlf28N7Y3KNDPbXMYkjlQj
aysp4KkdRjFaNAHzb8J/Ffw38TeDfib4jtfHOmy3GqzrrHirWPD+qbYdOXyVhhhW8j+60dva
qrMrbt26T5fMWuT/AGf9NudI+OlvY634u8VyySeCdF1fTdJ8QeIry4SW8uPti3zeTNJ+8ZVj
j+VlPl/e2rX140YZdpGRTGjRpAxUFk+6fSgCWiiigAooooAKKKKACiiigAooooA//9k=]]>
					</image>
				</images>
			</function>
			<function name="ERFC" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Inverse error function of X</title>
				<descr>The function ERFC calculates the inverse error function of X.</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL"/>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.1	10. mar. 2009
programmer 	hugo
tested by		tobias

this function calculates the inverse erf (error) function.

*)

ERFC := 1.0 - ERF(X);

(* revision history
hm	7. apr. 2008	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	real constants updated to new systax using dot

*)
]]>
				</sourceCode>
			</function>
			<function name="GDF" version="1.0.0" creationDate="0" lastModifiedDate="1637573008" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Gundermann function</title>
				<descr>&lt;HTML&gt;GDF calculate the Gundermann function.&lt;br&gt;
						The calculation is done using the formula:&lt;br&gt;
						&lt;img src= gdf.jpg /&gt;
						&lt;br&gt;
						The result of GDF is between -π/2 and + π/2 GDF(0) = 0</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
					</inputVars>
					<localVars>
						<var name="PI05" type="REAL">
							<descr>PI / 2</descr>
							<initValue>1.5707963267949</initValue>
						</var>
					</localVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.2	10. mar. 2009
programmer 	hugo
tested by		tobias

this function calculates the Gudermannian function.

*)

IF X = 0.0 THEN
	GDF := 0.0;
ELSIF X > 15.0 THEN
	GDF := PI05;
ELSIF X < -15.0 THEN
	GDF := -PI05;
ELSE
	GDF := ATAN(EXP(X)) * 2.0 - PI05;
END_IF;

(* revision history
hm	27. apr. 2008	rev 1.0
	original version

hm	18. oct. 2008	rev 1.1
	using math constants

hm	10. mar. 2009	rev 1.2
	real constants updated to new systax using dot

*)

]]>
				</sourceCode>
				<images>
					<image name="gdf.jpg" width="139" height="30" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CAAeAIsDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6K8a/a01K5sfgN4hjsdVvtK1G5a3ht/
7LSV7u5/fxtLbxLEDLmSJZVLRqzIhdwDsrwrRTp9xrDeKvB+pXmp+HPF3iiHTdcsfBNveTR+
HrKDTy5tPIRVkhkubiGASTGGIqtweVzvIB9F6x8dNH8O+LPHmm6rC1hpXg3R7XV9S1hpA0YE
/nFYVQfMZMQMdo5O+PGSwFdh4V1vUtctbiXU9AuNAdZFEMVxPFK0sbRI+4+Wx2lWdo2U9Gjb
BZSrN8Y6Z8PY/GWg6XoOteDV0m+8efFWXVbvR9U07Z9k0rTSzqFDrxG0VnAm5QFP21gOGNfZ
3inRZtR8JX+l6fFGksluYYY/tMtog4wB5kBEkY905HagDfrg/ih8TpfhvYpPbeEfEPjGbypL
ma18PQwPJBBHjfI3nSxgnn5UUl3IO1TgkecaT8F/F1nqlnPLbWSxRTI7lfHGvyHaGBOEd9rf
RuD0PFdN8d/ilN4Ns7PQrXS/FEtzrSPHJq/h/wAN3+qrpsOMPJm2hkAmIOI1bgN8zZVcMAd3
4B8caV8SvBeh+K9Cna50bWbOK+tJXQozRyKGXKnocHBHYg1p6xq1l4f0m81PUruKx06zhe4u
bq4cJHDGilmdmPAAAJJ9q8O8b+IJtB/Z58LWvgTw74l8P6LcXenaH5FtpNyup6TpPnrDNMts
FadGECEKdu9DIjkAqQPEta8B3fjT/hM7K6+H+t22i+JviHouirplxpkskdvo2nx+e06ArtUT
yRXKtL9wG7G5ySxoA+6Y3EiBhnDDIyCD+RqSvizx1D4h8d6hcaNd+EvEXmT/ABCtdCRrfTLi
C20fw/aOZVNu4QJtu0t3V5UO3bcqkjqFjWluPAPijXviHb+IbvStdsk8TfFSO5htre2uIo7D
S9MjbZPMgwE+0y2SkNIACt2xB/eNkA+o9N8TT618RtZ0a3cLp+h2dv8AaWCgmW5n3sEJ/h8u
NEbjr9oHTbz0OqatZ6HptzqGpXkGn2FrG0s91dSLHFEgGSzMxAUAdzXmvhuz1Kz8e/GKzsmj
g1a+ez1PT5JhlQr6eltEx/2RNZy8exryT9j3QV/tDS9U1DSfHGieOrLw+NK8Tw65pi2dhLdq
8ZaTzRAgvZWdXdJxJIdjtvbLgEA9O+CPi7W/GOveLoNV8QzXJ8P6tcWiWLwW8UlxbXAS7tJ5
lWMOm2CaOJANpJjkMm5jiPufCviG5vfEXifQ7477nS7iOWCTaF821nTfGxA4yrrNF7+SCeSa
6yvLbGxute+MPxFez1C60uJdE0fSRf2axNJBdI9/O+wSo6FhHd25+ZWHzDigD1KvH/jvJ4pi
vPDEPhrxvceE3vJ7qF7e0sLW5e42Wdxcbj58b4AMCL8oH+sOSSVxvWvw18RW91DK/wAVfF9z
GjqzQy2ujhJADkq23Tw2D0OCDzwRWZ4x8D+PL7xs3iPRPEXgXS47W3a3sptZ8GXF9f2sLKhm
Q3SalCCrOm7CxqMBQdxXcQBv7MOteIPFfwF8EeJ/FGvzeIda8RaRZ6zPPJbwQLC09vHIYY0i
RRsUk43ZbJOT0A9Xryb4Y/Dnxx4Burazk1vwHF4WWSSSfSfDfgq40uR2ZCAUkOpSomG2E5ib
KrtGMgj1mgDl/GXw/wBI8cPpU+orcxXuk3DXVhfWN1JbT20jRtGzK6MMgo7KVbKkHkHAqx4Z
8F6X4Q+3nTopfP1CcXV5dXM8k89zKI1jDPI5LHCIigZwAoAAFdBRQBzum+CtM03xBc62i3Nz
qc3mKs95dy3Bt45GRpI4Q7ERIzRoSqYB2L2VQOioooAKKKKACiiigAooooAzW0e1bWI9UEe2
+WA23mKcboywbaw6NgjIzyMtjG5s6VFFABWbpmj22jm5NupV7q4e5nkYlmkkbAyxPXACqPRV
VRgACtKigArifit4W8H+KPC0v/Cd2Nrqnhuxb7VNZX8XnW8rBSq74sHzT852pg5YrgFguO2r
ifiR8J/DfxYstPtfEaanJFY3K3dv/Zus3umskuCA5a2mjYkAnGScZ4oA5/8AZn+Hd78LPhBp
mg3n2iJVuby7tbC5mMr6dazXMktvZlyTkwxOkZ5IyhwcYr1auW8B/D3Rfhroz6XoMd4ltNO1
zI+oajc388kjBQWea4kkkbhVAyxwAAMAV1NAH//Z]]>
					</image>
				</images>
			</function>
			<function name="INC" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<descr>&lt;HTML&gt;INC adds to the input X the Value D and ensures that the output INC is not does not exceed the value of M.&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;If the result from the addition of X and D is greater than M, then it starts again at 0.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;The feature is especially useful when addressing arrays and buffers.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;Even the positioning of absolute encoders it can be used.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;INC can be used to decrement with a negative D, while INC will ensure that the result is not below zero.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;If subtract 1 from zero INC starts again at M.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;INC: = X + D, because D can take the maximum value M.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;If INC &gt; M then INC starts again at 0.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;If INC &lt; 0 then INC starts again at M&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;&lt;br&gt;
						Example: &lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;INC(3, 2, 5) returns 5&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;INC(4, 2, 5) returns 0&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;INC(0,-1,7) returns 7&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;</descr>
				<returnValue>INT</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="INT">
							<descr>Input</descr>
						</var>
						<var name="D" type="INT">
							<descr>Value to be added to the input value</descr>
						</var>
						<var name="M" type="INT">
							<descr>Maximum value for the output</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.1	15. jan 2008
programmer 	hugo
tested by	oscat

This is a increment function which increments the input X by the value D and compares the result with M.
if the output exceeds M it will continue to count from 0 again.

*)

INC := (X + D + M + 1) MOD (M + 1);

(* revision history
hm	7. feb 2007		REV 1.0
	original version

hm	15. jan 2008	rev 1.1
	allow for neagtive increment

*)
]]>
				</sourceCode>
			</function>
			<function name="EVEN" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<descr>&lt;HTML&gt;The function EVEN = TRUE if the input IN is even and FALSE for odd IN. &lt;br&gt;
						&lt;br&gt;
						Example:	&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;EVEN(2) is TRUE&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;EVEN(3) returns FALSE&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;</descr>
				<returnValue>BOOL</returnValue>
				<vars>
					<inputVars>
						<var name="in" type="DWORD">
							<descr>Input</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.1	1 dec 2007
programmer 	hugo
tested by		tobias

this function chacks an input for even  value
the output is true if the input is even.
execution time on wago 750 - 841 =  10  us
*)

EVEN := NOT in.0;

(* revision history
hm	1. oct 2006	rev 1.0
	ORIGINAL VERSION

hm	01.12.2007	rev 1.1
	changed code for improved performance

hm	21. mar. 2008	rev 1.2
	changed type of input IN from INT to DINT
*)
]]>
				</sourceCode>
			</function>
			<function name="GOLD" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Golden feature</title>
				<descr>&lt;HTML&gt;GOLD calculates the result of the golden feature.&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;GOLD (1) gives the golden ratio, and GOLD (0) returns 1.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;GOLD (X) * GOLD (-X) is always 1.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;GOLD (X) is the positive result of the quadratic equation and -GOLD(-X) is the negative result of the quadratic equation.&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;&lt;br&gt;
						The calculation is done using the formula:&lt;br&gt;
						&lt;img src= gold.jpg /&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.1	10. mar. 2009
programmer 	hugo
tested by		tobias

this function calculates the golden function.

*)

GOLD := (X + SQRT(X*X + 4.0)) * 0.5;


(* revision history
hm	27. apr. 2008	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	real constants updated to new systax using dot

*)

]]>
				</sourceCode>
				<images>
					<image name="gold.jpg" width="144" height="42" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CAAqAJADASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6KKKACiiigAooooAxG161XxGuiqXlvR
a/a5Qg+WGPftVpP7u9lfb/e8uT+7Wiby3+0eQZo/Ox/q93zf9815x4BLX3xW+K8877pre+0+
wh3drdbGGZV/3fMuLj/vpq8f+Ok0Gj/tSfDTW9Bmg0zUtRW68F67rq2gmNn9rjW4sl3N8v2j
dassY+bb9oVpF2sqyAH1Tb3cN0paGVJVHeNt1WK4nw54N0X4S+CW03wn4Z8uytEMkem6X5az
XMn8TFpHVWkYjl5JPm/iavNvCfxW8WXvxY8X2c/w78XyWkceneXaSXmlMtjuWQszL9u2/NgN
+73H5aAPf68Zh+Eej/EC91rxHrOseL4ri51C4iWDS/GmsadawxwN9nXbDb3Uca7vJ3ttX70j
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]]>
					</image>
				</images>
			</function>
			<function name="GAMMA" version="1.0.0" creationDate="0" lastModifiedDate="1637337377" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Gamma function approx</title>
				<descr>&lt;HTML&gt;The function GAMMA calculates the gamma function after approximation of NEMES.&lt;br&gt;&lt;br&gt;
						&lt;img src= gamma.jpg /&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
					</inputVars>
					<localVars>
						<var name="PI2" type="REAL">
							<descr>PI * 2</descr>
							<initValue>6.28318530717958647692528676655900576</initValue>
						</var>
						<var name="E_INV" type="REAL">
							<descr>1 / e</descr>
							<initValue>0.367879441171442</initValue>
						</var>
					</localVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.3	10. mar. 2009
programmer 	hugo
tested by		oscat

this function calculates the stirling function which is an approximation for the gamma function

*)

IF x > 0.0 THEN
	GAMMA := SQRT(PI2 / X) * POW(E_INV * (x + 1.0 / (12.0 * x - 0.1 / X)), X);
END_IF;


(* the stirling formula is not very accurate for small values of X
IF X >=0 THEN GAMMA := SQRT(math.PI2 * X) * EXPT(X / math.E, X); END_IF;
*)





(* revision history
hm	10.12.2007	rev 1.0
	original version

hm	18. oct. 2008	rev 1.1
	using math constants

hm	26. oct. 2008	rev 1.2
	using new formula with better accuracy

hm	10. mar. 2009	rev 1.3
	real constants updated to new systax using dot

*)
]]>
				</sourceCode>
				<images>
					<image name="gamma.jpg" width="263" height="69" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CABFAQcDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6KKKACiiigAooooAKKKKACikDbulLQA
UUUUAcx471y78N+Ddd1iwtob+90+xuLqC1uJGjSWRI2ZY2ZVZlVmULlVY8/dauQ/4ST43/8A
RPPAH/heX3/ymrqviMu7w3GhAKzalp8Mg/vRtewqw/75ZqwPjD4d1jWtDuLiy+IGo/DvT9Nt
ZrufUNOgtpW3KoZWl8+KRRDHtZmVdrNu+8oX5gCp/wAJJ8b/APonngD/AMLy+/8AlNXR+B9Q
8bX7Xv8AwmHh3QdBKiM2v9h65Pqfm/e8wSeZZ2/l7fl27d27c33dvzeLx/tNa18LvhP4Ev8A
4jeC/E2qeKNQ0OO81htCsbdYbeZbWa4kWTzpo1WTy7eaRo13bdv8O5d3t3w98ZN8QPCOn6+d
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
i0UUAadFFFAH/9k=]]>
					</image>
				</images>
			</function>
			<function name="EXPN" version="1.0.0" creationDate="0" lastModifiedDate="1634812070" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Exponential value of X^N</title>
				<descr>&lt;HTML&gt;EXPN calculates the exponential value of X^N for integer N.&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt; EXPN is especifcally written for PLC without Floating Point Unit and is about 30 times faster than the IEC standard function EXPT().&lt;/li&gt;&lt;br&gt;
						&lt;li&gt; Note the special case of the 0^0 defined mathematically as a 1 and is not a 0.&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;
						Example&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;EXPN(10,-2) = 0.01&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;EXPN(1.5,2) = 2.25&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;EXPN(0,0) = 1&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
						<var name="N" type="INT">
							<descr>Exponential</descr>
						</var>
					</inputVars>
					<localVars>
						<var name="sign" type="BOOL"/>
						<var name="N_word" type="WORD"/>
						<var name="X_tmp" type="REAL"/>
					</localVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[

(*
version 1.2	10. mar. 2009
programmer 	hugo
tested by		oscat

this function calculates X to the power of N (Y = X^N) whilke N is an integer
especially on CPU's without a floating point unit this algorythm is about 30 times faster then the IEC standard EXPT() Function

*)
X_tmp := X;
N_word := TO_WORD(N);
sign := N_word.15;
N := ABS(N);
N_word := TO_WORD(N);
IF N_word.0 THEN EXPN := X_tmp; ELSE EXPN := 1.0; END_IF;
N_word := TO_WORD(SHR(N_word,1));
WHILE N_word > 0 DO
   X_tmp := X_tmp * X_tmp;
   IF N_word.0 THEN EXPN := EXPN * X_tmp; END_IF;
   N_word := TO_WORD(SHR(N_word,1));
END_WHILE;
IF sign THEN EXPN := 1.0 / EXPN; END_IF;



(* revision history
hm	4. dec 2007	rev 1.0
	original version

hm	22. oct. 2008	rev 1.1
	optimized code

hm	10. mar. 2009	rev 1.2
	removed nested comments
	real constants updated to new systax using dot

*)
]]>
				</sourceCode>
			</function>
			<function name="FACT" version="1.0.0" creationDate="0" lastModifiedDate="1637572321" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Factorial</title>
				<descr>&lt;HTML&gt;The function FACT calculates the factorial of X.&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;It is defined for input values from 0 .. 12.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;For values less than zero and greater than 12 is the result -1.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;For the factorial of larger numbers, the GAMMA function is suitable.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;For natural numbers X:	X! = 1*2*3...*(X-1)*X, 	0! = 1&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;Factorial of negative or non-whole numbers is not defined.&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;
						Example:	&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;1! = 1&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;2! = 1*2 = 2&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;5! = 1*2*3*4*5 = 120&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;</descr>
				<returnValue>DINT</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="INT">
							<descr>Input value</descr>
						</var>
					</inputVars>
					<localConsts>
						<const name="FACTS" type="DINT" dim0="13">
							<initValue>[1,1,2,6,24,120,720,5040,40320,362880,3628800,39916800,479001600]</initValue>
						</const>
					</localConsts>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.5	26. mar. 2011
programmer 	hugo
tested by		tobias

this function calculates the factorial of x

if the input is negative or higher then 12 the output will be -1.

*)

IF X >= 0 AND X <= 12 THEN
	FACT := FACTS[X];
ELSE
	FACT := -1;
END_IF;


(* working code without array
IF X > 12 OR X < 0 THEN
	FACT := -1;
ELSIF X < 7 THEN
	FACT := 1;
	FOR i := 2 TO X DO
		FACT := FACT * i;
	END_FOR;
ELSE
	FACT := 5040;
	FOR i := 8 TO X DO
		FACT := FACT * i;
	END_FOR;
END_IF;
*)

(* revision history
hm 4.3.2007		rev 1.1
	changed a critical error where while loop was indefinite.

hm	10.12.2007	rev 1.2
	start value for i has changed to 2 for better performance

hm	10. mar 2008	rev 1.3
	changed output of fact to dint to allow bigger values

hm	27. oct. 2008	rev 1.4
	optimized code

hm	26. mar. 2011	rev 1.5
	using array math.facts
*)
]]>
				</sourceCode>
			</function>
			<function name="GAUSS" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Gaussian normal distribution</title>
				<descr>&lt;HTML&gt;The function calculates the Gaussian normal distribution using the following formula:&lt;br&gt;
						&lt;img src= gauss.jpg /&gt;
						&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;The normal distribution is the density function normally distributed random variables.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;With the parameters U = 0 and SI = 1, it follows the standard normal distribution.&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input value</descr>
						</var>
						<var name="U" type="REAL">
							<descr>Locality of the function</descr>
						</var>
						<var name="SI" type="REAL">
							<descr>Sigma, spreading the function</descr>
						</var>
					</inputVars>
					<localVars>
						<var name="temp" type="REAL"/>
						<var name="si_inv" type="REAL"/>
					</localVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.2	10. mar. 2009
programmer 	hugo
tested by		tobias

this function calculates the gaussian density function

*)

temp := X - U;
si_inv := 1.0  / si;
GAUSS := EXP(Temp * Temp * si_inv * si_inv * - 0.5) * 0.39894228 * si_inv;



(* revision hisdtory
hm	6. apr. 2008	rev 1.0
	original version

hm	27. oct. 2008	rev 1.1
	optimized performance	

hm	10. mar. 2009	rev 1.2
	real constants updated to new systax using dot

*)
]]>
				</sourceCode>
				<images>
					<image name="gauss.jpg" width="191" height="45" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CAAtAL8DASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6KKKACiiigAooooAKKKKACiiigAorxO
x8Ua9b/taaj4Wl1ea48NDwXBqsOnMkYWG6a+kiZgyr5h3LGv3mb+KvbKACiiigAooooAK429
8YXFn8UNG8Li0je21LR77U1vPP8AmVraazj8vZt6MLzdu3fw9Ku65eeJbe7UaRpOk3tqIzmS
91SS1YN/d2rbyfL0+bd/wGvK/GXijxHB8aLCLStA8Dah4hh02a301dU8d3ljeyW8vkyXK/Y4
9Pkj/wBZCvzbmbbErfL8ygA9c8aa83hnwfr2soiyPp9jPeKrdG8uNm/9lrl/ih40l+EPwvm8
QSSfb4NHNr9unumbebfzY455uPvOsZaTb/Ey7f4q868Xal8Ubix+IEXifTdKsPCTeF96f2fI
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]]>
					</image>
				</images>
			</function>
			<function name="GCD" version="1.0.0" creationDate="0" lastModifiedDate="1634807960" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Greatest common divisor</title>
				<descr>The GCD function calculates the greatest common divisor (GCD) of A and B.</descr>
				<returnValue>INT</returnValue>
				<vars>
					<inputVars>
						<var name="A" type="DINT">
							<descr>Input value A</descr>
						</var>
						<var name="B" type="DINT">
							<descr>Input value B</descr>
						</var>
					</inputVars>
					<localVars>
						<var name="t" type="DINT"/>
						<var name="A_DWORD" type="DWORD"/>
						<var name="B_DWORD" type="DWORD"/>
					</localVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.0	19. jan. 2011
programmer 	hugo
tested by	tobias

this function calculates the gretaest common divisor of two numbers A and B

*)



IF A = 0 THEN
	GCD := TO_INT(ABS(B));
ELSIF B = 0 THEN
	GCD := TO_INT(ABS(A));
ELSE
	A := ABS(A);
	B := ABS(B);
	GCD := 1;
		A_DWORD := TO_DWORD(A);		
		B_DWORD := TO_DWORD(B);
	WHILE NOT(A_DWORD.0 OR B_DWORD.0) DO
		A := SHR(A,1);
		B := SHR(B,1);
		GCD := TO_INT(SHL(GCD,1));
		A_DWORD := TO_DWORD(A);		
		B_DWORD := TO_DWORD(B);
	END_WHILE;
	WHILE A > 0 DO
		A_DWORD := TO_DWORD(A);		
		B_DWORD := TO_DWORD(B);
		IF NOT(A_DWORD.0) THEN A := SHR(A,1);
		ELSIF NOT(B_DWORD.0) THEN B := SHR(B,1);
		ELSE
			t:= SHR(ABS(A-B),1);
			IF A < B THEN B := t; ELSE A := T; END_IF;
		END_IF;
	END_WHILE;
	GCD := GCD * TO_INT(B);
END_IF;


(* revision history
hm	19. jan. 2011	rev 1.0
	original version

*)
]]>
				</sourceCode>
			</function>
			<function name="EXP10" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Exponential base 10</title>
				<descr>&lt;HTML&gt;The function Exp10 returns the exponential base 10 &lt;br&gt;&lt;br&gt;
						Example&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;Exp10 (2) = 100&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;EXP10(0) = 1&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;EXP10(3.14) = 1380.384265&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.0	 2 dec 2007
programmer 	hugo
tested by		tobias

this function calculates the exponent to the basis 10
exp10(3) = 1000

*)

EXP10 := EXP(X * 2.30258509299405);

(* revision history
hm	2. dec 2007		rev 1.0
	original version

*)
]]>
				</sourceCode>
			</function>
			<function name="FIB" version="1.0.0" creationDate="0" lastModifiedDate="1634803238" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Fibonacci number</title>
				<descr>&lt;HTML&gt;FIB calculate the Fibonacci number&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;The Fibonacci number is defined as follows:&lt;br&gt;
						FIB(0) = 0&lt;br&gt;
						FIB(1) = 1&lt;br&gt;
						FIB(2) = 1&lt;br&gt;
						FIB(3) = 2&lt;br&gt;
						FIB(4) = 3&lt;br&gt;
						FIB(5) = 5 .....&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;The Fibonacci number of X is equal to the sum of the Fibonacci numbers of X-1 and X-2.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;The function can compute the Fibonacci numbers up to 46, if X &lt; 0 or greater than 46, the function returns -1.&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;</descr>
				<returnValue>DINT</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="INT">
							<descr>Input value</descr>
						</var>
					</inputVars>
					<localVars>
						<var name="t1" type="DINT"/>
						<var name="t2" type="DINT"/>
					</localVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[

(*
version 1.3	26. mar. 2008
programmer 	hugo
tested by		tobias

this function calculates the fibonacci sequence

*)
t1 := 0;
t2 := 0;
IF X < 0 OR X > 46 THEN
	FIB := -1;
ELSIF x < 2 THEN
	FIB := X;
	RETURN;
ELSE
	(* the fibonacci number is the sum of the two suceeding fibonaci numbers *)
	(* we store the numbers alternatively in t1 and t2 depending on pt *)
	t2 := 1;
	WHILE X > 3 DO
		X := X-2;
		t1 := t1 + t2;
		t2 := t1 + t2;
	END_WHILE;
	IF X > 2 THEN t1 := t1 + t2; END_IF;
	fib := t1 + t2;
END_IF;

(* alternative code for very big numbers

IF X < 31 THEN
	fib := 0.4472136 * (expn(1.618034,X) - expn(-0.618034,X));
ELSE
	fib := 0.4472133 * expn(1.618034,X);
END_IF;

*)

(* revision history
hm		27. dec 2007	rev 1.0
	original version

hm		2. jan 2008	rev 1.1
	deleted unused variable pt

hm		10. mar 2008	rev 1.2
	changed output to dint instead of real

hm		26. mar. 2008	rev 1.3
	function now returns -1 for input < 0 or > 46

*)
]]>
				</sourceCode>
			</function>
			<function name="INC2" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<descr>&lt;HTML&gt;INC2 addes valued D to the input X and ensures that the output INC does not exceed the value U (upper limit) or under-run the value L (low limit).&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;If the result from the addition of X and D is larger than U so it begins again with L.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;It is ensured that at negative D when reaching L counted again at U on.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;The feature is especially useful when addressing arrays and bufers.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;Even the positioning of absolute encoders it can be used.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;INC2 can be used to decrementieren with a negative D, while INC2 will ensure that the result is not below zero.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;INC2 := X + D, where L &lt;= INC2 &lt;= U.&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;&lt;br&gt;
						Example: &lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;INC2(2, 2, -1, 3) result -1&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;INC2(2, -2, -1, 3) result 0&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;INC2(2, 1, -1, 3) result 3&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;INC2(0, -2, -1, 3) result 3&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;</descr>
				<returnValue>INT</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="INT">
							<descr>Input</descr>
						</var>
						<var name="D" type="INT">
							<descr>Value to be added to the input value</descr>
						</var>
						<var name="L" type="INT">
							<descr>Lower limit</descr>
						</var>
						<var name="U" type="INT">
							<descr>Upper limit</descr>
						</var>
					</inputVars>
					<localVars>
						<var name="tmp" type="INT"/>
					</localVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.0	29. jun. 2008
programmer 	hugo
tested by	oscat

This function increments the input X by the value D and compares the result with U.
if the output exceeds U it will continue to count from L again.

*)

tmp := U - L + 1;
INC2 := (X + D - L + tmp) MOD tmp + L;



(* revision history
hm	29. jun. 2008		REV 1.0
	original version


*)
]]>
				</sourceCode>
			</function>
			<function name="INC1" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<descr>&lt;HTML&gt;INC1 count the variable X from 0.. N-1  so that exactly N diferent values are produced starting from 0.&lt;br&gt;
						If x &gt;= N-1 then result is 0</descr>
				<returnValue>INT</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="INT">
							<descr>The variable that is incremented</descr>
						</var>
						<var name="N" type="INT">
							<descr>Number of values X can be</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[



(*
version 1.2	23. feb. 2009
programmer 	hugo
tested by	oscat

This is a increment function which increments the variable X by 1 and if N is reached, it begins with 0 instead of N again.
inc1(X,3) will generate 0,1,2,0,1,.....

*)

IF X >= N - 1 THEN
	INC1 := 0;
ELSE
	INC1 := X + 1;
END_IF;



(* revision history
hm	13. oct. 2008	rev 1.0
	original version

hm	22. oct. 2008	rev 1.1
	added statement to return value for compatibility reasons

hm	23. feb. 2009	rev 1.2
 	when inc1 is called with X >= N inc will continue with 0
*)
]]>
				</sourceCode>
			</function>
			<function name="LAMBERT_W" version="1.0.0" creationDate="0" lastModifiedDate="1637573950" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Lambert function</title>
				<descr>&lt;HTML&gt;The LAMBERT_W function is defined for x &gt; = -1/e.&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;When the value is below the range the result is -1000.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;The range of LAMBERT_W function is &gt;= -1.&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input value</descr>
						</var>
					</inputVars>
					<localVars>
						<var name="w" type="REAL"/>
						<var name="i" type="INT"/>
						<var name="we" type="REAL"/>
						<var name="w1e" type="REAL"/>
						<var name="last" type="DWORD"/>
						<var name="ewx" type="REAL"/>
					</localVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[



(*
version 1.1	10. mar. 2009
programmer 	hugo
tested by		oscat

this function calculates the lambert_w function.

*)

(* check for valid input and return -1000 if too low *)
IF x < -0.367879441171442 THEN
	LAMBERT_W := -1000.0;
	RETURN;
(* return 0 if x = 0 *)
ELSIF x = 0.0 THEN
	RETURN;
(* first an estimate is calculated *)
ELSIF x <= 500.0 THEN
	w := LN(x + 1.0);
	w := 0.665 * (1.0 + 0.0195 * w) * w + 0.04;
ELSE
	w := LN(x - 4.0) - (1.0 - 1.0/LN(x)) * LN(LN(x));
END_IF;
(* use estimate to calculate exact result *)
FOR i := 0 TO 5 DO
	ewx := EXP(w);
	we := w * ewx - x;
	w1e := (w+1.0) * ewx;
	last := TO_DWORD(w) AND 16#FFFF_FFFC;
	w := w - (we / (w1e - (w+2.0) * we / (2.0 * w + 2.0)));
	IF (TO_DWORD(w) AND 16#FFFF_FFFC) = last THEN EXIT; END_IF;
END_FOR;
LAMBERT_W := w;


(* revision hisdtory
hm	26. oct. 2008	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	real constants updated to new systax using dot

*)
]]>
				</sourceCode>
			</function>
			<function name="MAX3" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Maximum value of 3 inputs</title>
				<descr>&lt;HTML&gt;The function MAX3 delivers the maximum value of 3 inputs.&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;Basically, the in standard IEC61131-3 contained function MAX should be equipped with a variable number of inputs.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;However, since in some systems the MAX function is supported only two inputs, the function MAX3 is offered.&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;
						Example: &lt;br&gt;
						MAX3(1,3,2) = 3.</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="in1" type="REAL">
							<descr>Input1</descr>
						</var>
						<var name="in2" type="REAL">
							<descr>Input2</descr>
						</var>
						<var name="in3" type="REAL">
							<descr>Input3</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.1	18. mar. 2011
programmer 	hugo
tested by		tobias

this function returns the highest of 3 real values

*)

MAX3 := MAX(MAX(IN1,IN2),IN3);


(* revision history
hm	1.1.2007	rev 1.0
	original release

hm	18. mar. 2011	rev 1.1
	improve performance

*)
]]>
				</sourceCode>
			</function>
			<function name="MID3" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Average value of 3 inputs</title>
				<descr>&lt;HTML&gt;The function MID3 returns the average value of 3 inputs, but not the mathematical average.&lt;br&gt;
						&lt;br&gt;Example: &lt;br&gt;
						MID3(1,5,2) = 2.</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="IN1" type="REAL">
							<descr>Input1</descr>
						</var>
						<var name="IN2" type="REAL">
							<descr>Input2</descr>
						</var>
						<var name="IN3" type="REAL">
							<descr>Input3</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.2	18. mar. 2011
programmer 	hugo
tested by		tobias

returns the mid value of 3 real inputs.

*)


IF IN1 > IN2 THEN MID3 := IN1; IN1 := IN2; IN2 := MID3; END_IF;
IF IN2 > IN3 THEN IN2 := IN3; END_IF;
MID3 := SEL(IN1 > IN2, IN2, IN1);


(*
hm	1.1.2007	rev 1.1
	rewrote the function for better performance

hm	18. mar. 2011	rev 1.2
	improve performance
*)
]]>
				</sourceCode>
			</function>
			<function name="INV" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Inverse of X</title>
				<descr>&lt;HTML&gt;INV calculates the inverse of X:&lt;br&gt;
						&lt;img src= inv.jpg /&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.1	10. mar. 2009
programmer 	hugo
tested by		tobias

This function calculates the result of 1 / X

*)



IF X <> 0.0 THEN INV := 1.0 / X; END_IF;




(* revision history
hm	26. oct. 2008	rev 1.0
	original version

hm	10. mar. 2009	rev 1.1
	real constants updated to new systax using dot

*)

]]>
				</sourceCode>
				<images>
					<image name="inv.jpg" width="67" height="37" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CAAlAEMDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6Ko31wLKzmmLJGI0Z90zbY1wv8AE38K
181D9rrVtL+DPw7+JOt+DrXTtH8VajDFdQQ6pJJJpumzNtXUGzAu6NV8uRl+Xasi/NQB9R0V
438TfjJrXgCH4iX9poenalpXg3wz/b0lxNqEkUk0m24ka32rCyr+7t927d/y1j+Wr/h/4k+I
/Ed54PtIfD2npcX+nJqWvrJqEmNJjkVfJjT9z++dm8xdreX/AKtm/uhgD1Wiqc+pWtq2ya6h
jf8AuyyKtSW95DdKWhlSUL18tt1AHnPxY+KF78NdV8BwRaTFqVp4l8QwaBNO900LWjSRySLI
I/LbzP8AUsv3l+8v3q9OrxP9ojwp4i8U3nwvfQdCutZTSfGNnq+otBcW8f2e1jhmVm/fSLu+
aRflXd3r2ygAooooA8g/ads/GGtfAvxboXgbRrnWvEmtWMmmQrDcQQ+Qs37uSbdNJGoKxs7L
j+JRWe3wvt/FFxqHg7VPDF5p/gO08H/8I3YyyTW5WaOf5bmPakjMpjjt7XazKq5MmK9vooA+
T5Pgr8SNS/Y38X+CNUkgvviR4it20u6ufNxBIqiPT47gt6Na28czfxbmb5f4a+h/A/hdPB+i
CAym7vZ5PtF7eFQrTzsqqzbf4VVVVVX+FEVf4a6migDyL4j/AAMXx/4k/tYyeG1IgWH/AImn
ha31Kb5f+m0jbtv+zVGP9nrz/hv4g8HjxJP4UGrzQyf2x4AsYvD99b+XIknySR7hubbtZtv3
WZa9rooA+NP+GSPDi+LP+EWP7U/xu/4SX7P9r/sf/hYKfa/J/wCenl+Tu2f7XStf4Vfsv6Fq
WpaV4r8O/tIfF3xrZ6TqMcrWsvjlb7T7mSGRWa3uFWH5kbbtkjz0LCk+PmtQXXxw+F/iLSLq
8tNBj1O48DeINc091Tzlv9rLaxyf7N1awxySLt8tptqt5m7y/qHR9HstB0u203TbSGxsbWNY
be1to1jiiRR8qqq9F4oA1KKKKACiiigAooooAKpXlnDqFrPb3ESTwSRkPFIu5XVgQVYdxRRQ
By9x8GfAVz4ZsvDc3gnw5N4ds5vPtdJk0mBrS3kyX3pEV2K24k5AHWuuhhS2iWONFSNBtVFG
ABRRQBPRRRQB/9k=]]>
					</image>
				</images>
			</function>
			<function name="MIN3" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Minimum value of 3 inputs</title>
				<descr>&lt;HTML&gt;The function MIN3 returns the minimum value of 3 inputs.&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;Basically, the function MIN in standard functionality IEC61131-3 should have a variable number of inputs.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;However, since in some systems the function MIN supportes only two inputs, the function MIN3 is available.&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;&lt;br&gt;
						Example:&lt;br&gt;
						MIN3(1,3,2) = 1.</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="in1" type="REAL">
							<descr>Input0</descr>
						</var>
						<var name="in2" type="REAL">
							<descr>Input1</descr>
						</var>
						<var name="in3" type="REAL">
							<descr>Input2</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.1	18. mar. 2011
programmer 	hugo
tested by		tobias

this function returns the lowest of 3 real values

*)

MIN3 := MIN(MIN(IN1,IN2),IN3);


(* revision history
hm	1.1.2007	rev 1.0
	original release

hm	18. mar. 2011	rev 1.1
	improve performance

*)
]]>
				</sourceCode>
			</function>
			<function name="LANGEVIN" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Langevin function</title>
				<descr>&lt;HTML&gt;The The Langevin Function is very similarto sigmoid function, but more slowly approaching the limits.&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;In contrast to the sigmoid  are the values at -1 and +1.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;The Langevin function is mainly at CPUs without foating point unit much faster than the Sigmoid function.&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;&lt;br&gt;
						The following chart shows the progress of the Langevin function:&lt;br&gt;
						&lt;img src= langevin.jpg /&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.2	10.mar. 2009
programmer 	hugo
tested by		tobias

this function calculates the langevin function

*)

IF X = 0.0 THEN
	LANGEVIN := 0.0;
ELSE
	LANGEVIN := COTH(X) - 1.0 / X;
END_IF;

(* revision history
hm	10.12.2007	rev 1.0
	original version

hm	11. mar 2008	rev 1.1
	changed formula to avoid problems when x = 0

hm	10. mar. 2009	rev 1.2
	real constants updated to new systax using dot

*)
]]>
				</sourceCode>
				<images>
					<image name="langevin.jpg" width="200" height="120" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CAB4AMgDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6r2v+pf/eNWKr2v+pf/AHjQA28+/b/9
dKtVVvPv2/8A10q1QBVs/vT/APXRqW6/1a/7y0ln96f/AK6NS3X+rX/eWgCzVW2/4+J/96rV
Vbb/AI+J/wDeoAL3/j3b8Ksr90VWvf8Aj3b8Ksr90UAVk/4/Jv8AdWlvP+PaX/dpE/4/Jv8A
dWlvP+PaX/doA5DxpM8fiX4eLG7IsmuSIyqfvD+zL5sN/wB8rXXf8vzf9c65Pxt/yMnw3/7D
kn/prvq6z/l+b/rnQBNN/q3+lNtv+PeP/dpbj/UyfSktv+PeP/doAil/4/I/9xqtN901Vl/4
/I/9xqst900AQ2P/AB7JSTf8fVv/AMCpbH/j2Skm/wCPq3/4FQBZqrY/6r/gRq1VWx/1X/Aj
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
n/no1FFFAH//2Q==]]>
					</image>
				</images>
			</function>
			<function name="RDM2" version="1.0.0" creationDate="0" lastModifiedDate="1637576447" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Integer random value in the range from LOW to HIGH</title>
				<descr>&lt;HTML&gt;RDM2 generates an integer random value in the range from LOW to HIGH, where LOW and HIGH are being included in the range of values.&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;If the function is used only once per cycle, the input value LAST can remain at 0.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;The function RDM2 used the PLC internal time base to generate the random number.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;Since RDM2 uses LAST, an integer which represents the fnal result between LOW and HIGH, it can lead to a situation, in which the result RDM2 always produces the same result, as long as PLC Timer does not change in a cycle.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt; This most often happens, if the result is identical to the start value.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;Since then, the same start value will be reused within the same cycle again, and the result is the same. &lt;/li&gt;&lt;br&gt;
						&lt;li&gt;This occurs more often, depending on, if the specifc area of LOW and HIGH is smaller for the result. &lt;/li&gt;&lt;br&gt;
						&lt;li&gt;One can avoid this efect easily by using as a starting value of loop counter which defnitely uses each time a new value, or better yet add a loop counter with the fnal result used as initial value. &lt;/li&gt;
						&lt;/ul&gt;</descr>
				<returnValue>INT</returnValue>
				<vars>
					<inputVars>
						<var name="last" type="INT">
							<descr>Last calculated value</descr>
						</var>
						<var name="low" type="INT">
							<descr>Lowest generated value</descr>
						</var>
						<var name="high" type="INT">
							<descr>Higest generated value</descr>
						</var>
					</inputVars>
					<localConsts>
						<const name="PI" type="REAL">
							<descr>Kreiszahl PI</descr>
							<initValue>3.14159265358979323846264338327950288</initValue>
						</const>
					</localConsts>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.1	18. oct. 2008
programmer 	hugo
tested by	tobias

this function calculates an integer pseudo random number
the random number will be in the range of low <= rdm2 <= high.

*)

RDM2 := TO_INT(RDM(FRACT(TO_REAL(last) * PI)) * TO_REAL(high - low)) + low;

(* revision history
hm		29. feb 2008		rev 1.0
	original version

hm		18. oct. 2008		rev 1.1
	using math constants

*)
]]>
				</sourceCode>
			</function>
			<function name="WINDOW2" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Test input within limits included</title>
				<descr>&lt;HTML&gt;The Window2 function tests whether the input value IN &lt;= HIGH and IN &gt;= LOW.&lt;br&gt;
						In contrast to the function WINDOW which returns TRUE if the IN is within the limits LOW and HIGH WINDOW2 supplies FALSE if IN is outside the limits LOW and HIGH .</descr>
				<returnValue>BOOL</returnValue>
				<vars>
					<inputVars>
						<var name="LOW" type="REAL"/>
						<var name="IN" type="REAL"/>
						<var name="HIGH" type="REAL"/>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
	version 1.0	31 oct 2007
	programmer 	hugo
	tested BY	tobias

this checks a signal if the signal is between the upper and lower limit including the two limits
*)

WINDOW2 := IN >= LOW AND IN <= HIGH;


(* revision history
hm	31.10.2007	rev 1.0
	original version

*)
]]>
				</sourceCode>
			</function>
			<function name="SIGN_I" version="1.0.0" creationDate="0" lastModifiedDate="1634743230" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>TRUE if the input value is negative</title>
				<descr>&lt;HTML&gt;The function SIGN_I returns TRUE if the input value is negative.&lt;br&gt;
						The input values are of type DINT.</descr>
				<returnValue>BOOL</returnValue>
				<vars>
					<inputVars>
						<var name="IN" type="DINT">
							<descr>Input value</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.3	27. oct. 2008
programmer 	hugo
tested by	tobias

this function return true if the integer input is negative

*)
if in < 0 then
SIGN_I := true;
else
SIGN_I := false;
end_if;

(* revision history
hm 3.3.2007	rev 1.1
	changed method of function for better compatibility to other systems

hm	1.12.2007	rev 1.2
	changed code to improve performance

hm	27. oct. 2008	rev 1.3
	changed type of input to dint

*)
]]>
				</sourceCode>
			</function>
			<function name="SQRTN" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>N-fold root of X</title>
				<descr>&lt;HTML&gt;SQRTN calculates the N-fold root of X as follows:&lt;br&gt;
						&lt;img src= sqrtn.jpg /&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input value</descr>
						</var>
						<var name="N" type="INT">
							<descr>Number of root</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.3	10. mar. 2009
programmer 	hugo
tested by		tobias

this function calculates the nth root function of X according to the formula sqrtn = x^(1/n).

*)

IF N > 0 THEN
	SQRTN := EXP(LN(x) / TO_REAL(n));
ELSE
	SQRTN := 0.0;
END_IF;


(* revision history
hm		12 jan 2007	rev 1.0
	original version

hm		2. dec 2007	rev 1.1
	changed code for better performance

hm		11. mar 2008	rev 1.2
	added result 0 for compatibility reasons

hm 10. mar. 2009	rev 1.3
	added type conversions for compatibility reasons																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																									

*)
]]>
				</sourceCode>
				<images>
					<image name="sqrtn.jpg" width="96" height="24" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CAAYAGADASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6K474t+MNR+H3wt8W+JtJ0l9e1TR9Lu
b+20yPduupI42dYxtBbkjHAJr5q8J/tleKG+G+neKLq10Dx0fFj6dp3gyHwzDNYnUtUn877T
bXCyzTNbrbeWu9zxgFh94KAD7Gor5R0/9oj4kaT8RPih4a8Q3Hgu4s/AfhRNd1LWtOtLqKK3
u5QZIrV0adyQsUczFgQXzGdqcrXJeG/2svjZ4i/Z7uvi3feDvDPhTwrD4RvtXS81Tz2luL+N
1NuEthKGFvIpZVYsWcgP8isqsAfbdFfC8Px9+MHwB8H/AAJ0DXraz+Ivjf4hX8091p6RTLfq
suLl0Baby4xEZhGW4jjRQQm1CD69+z38evGfxG+FvxI8SeK7Dwtp194b1zU9Msp7O+mt9JuI
7RFBkkuZVLCMSeYrTeWBhCQnGKAPoqvM/j/4n8V+E/h3LceBIrW98YyXEcem6fermK8YZkli
bHIzDHMQR0KjtmvGv+GwPEP/AEE/gL/4dg//ACvr0/QfElx8QPAukfEFrHT/ABPrejtdy2Gl
eA/EaajYXUxDwbVuJFgjd9rMpLgCMl+aAMA/G/UfE/gDxJ418K6pBcaTqH9maZ4YjmtQwF7e
LbqskhBy6rJdxKU4KmKUE/3dzWLb4veG9Ku9U1f4o/DfS9Ms4mnub298FXkMMEajLO7trQVV
AGSScCvPPhHr3h/x9oXwc0rw1oX/AAi1q+qax4l1fw60nmmxurWWWO6tmYgZKahexsDgDEYI
AGBX03qV7a6fp91c300VvYwxNJPNcMFjjjAJZnJ4CgAkk8YoA+fYfil4mu/D97r0H7QnwXm0
OymjtrrU4/DsrW0Er42RvKNc2qzZGFJycjFerfCPxBe+K/B66peeM/C/juO4nf7LrHhGza2s
WjXClMG7ud7q6yZYSAdBtBUk/Df7IXhO0+LfiP4nfChtRUfBjQfETeIrDQvsElrLrtleyGa0
V2cDNgpiLgKP325Mny/lf9E7Ozg0+1htrWGO2toUCRwwoFRFAwFUDgADsKAON+KHgHWfG7eG
p9E8Vz+Fb/Q9T/tJJI7VbmK6PkSw+TNGWXdGRMSQCDkKQVIBHgfiP9i/RfBvg/R9W07x3q3h
XXvD/iW+8YS69pekxXCm5u12XCRWOx0VNu1UXa5UD+IkmiigDif2Yf2dbP4qfs3/ABZ0zUL3
xJ4fufiB4ru7jUbjVLaSLVfsaTJ5cc3nIu5pYlLMwG3/AEhwMYwPpn49/Amy+N3wZvPh2mpy
eGdOmaz2S2dskwjjt5o5Vj8p/lZT5QXacjHY9KKKAKej/s6WOl/FDSfHF14k1jXNW0nw2/h6
xbVnSZ4mklMk15u2j99IcKQAECgKqquAHfs6/s8Wf7P3wrTwT/b+oeLrcySySz6sqBCJGLOi
xKNqqSzMc7izMxYngAooA73/AIVz4T/6FjR//BfF/wDE1qabpNlototrp9pBY2yklYbeNY0B
JySFUAcmiigDy34a/AC3+G/xo+Ivji2v2lsvFRgmt9KwQmnzkE3jpzgee6wu2OrJk1L8YPgf
e/GPWNEi1LxbdW3g2xuobq98JpZRPaauY33bLpj87xnA/d5CEjLB+ACigDMf9nW8h/aOf4uW
PjO6066m02LRrnQ4bCE2tzZI+8JIT8xcMTiQEEDAxjIPt1FFAH//2Q==]]>
					</image>
				</images>
			</function>
			<function name="MUL_ADD" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>X*K + O</title>
				<descr>&lt;HTML&gt;MUL_ADD multiplies the input value X with K and adds O.&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;MUL_ADD = X * K + O.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;MUL_ADD (0.5, 10, 2) is 0.5 * 10 + 2 = 7&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
						<var name="K" type="REAL">
							<descr>Multiplier</descr>
						</var>
						<var name="O" type="REAL">
							<descr>Offset</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.1	11 nov 2007
programmer 	hugo
tested by		tobias

this function multiplies an input X with K and adds Offset O to the result.

*)

MUL_ADD := X * K + O;

(* revision history
hm	28. feb 2007
	original version

hm	11.nov 2007		rev 1.1
	deleted preset values for K and O this makes no sense for a function

*)
]]>
				</sourceCode>
			</function>
			<function name="SINC" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Sine Kardinalis</title>
				<descr>&lt;HTML&gt;SINC calculates the sine Kardinalis or the gap function.&lt;br&gt; SINC(0) = 1&lt;br&gt;
						&lt;img src= sinc.jpg /&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input value</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.2	10. mar. 2009
programmer 	hugo
tested by		tobias

this function calculates the sinc function.

*)

IF X = 0.0 THEN
	SINC := 1.0;
ELSE
	SINC := SIN(x) / x;
END_IF;


(* revision histroy
hm	11. mar. 2008	rev 1.0
	original version

hm	1.12.2007	rev 1.1
	changed code to improove performance

hm 10. mar. 2009	rev 1.2
	real constants updated to new systax using dot																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											

*)
]]>
				</sourceCode>
				<images>
					<image name="sinc.jpg" width="136" height="48" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CAAwAIgDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6KKKACiiigAooooAK88+E/xAuPido+q
eII7VYNAfUJrbRp9zNJeW0TeW1y3YLJIsjR7fvR+W38W1d/4gX02n+BfEl3buYri3025kjdf
4WWJmU14foPxa0D9nH9h7wV4w1VftOmaR4T0kRW9sdv2mZ7eGOONWb7u6Rl+Zvu8s1AH0i33
Tzt/2q+ff2d/id4x+L/2u7vNU05tK8P6tqWj6heWdvGy6xNHcN9nkt9sjeTD9n8ltzbmkaT5
dqqrSch8M/iD4v8A2lvEmr+GNdOl6t8OZNJW4vNd8Hrd2tpHfNKv/Etj1BpmXUo/L3eZJDHH
H/C33ttfQXhT4b6P4N8QeJNW0tbmGXX7iK5voTcs0PmRwpCjRx/dj/dxxr8uOI1oA7KivGdX
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
iiigAooooAKKKKAP/9k=]]>
					</image>
				</images>
			</function>
			<function name="MODR" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Remainder of a division similar to the standard MOD</title>
				<descr>&lt;HTML&gt;The function MODR returns the remainder of a division similar to the standard MOD function, but for REAL numbers.&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;MODR internally uses the data format of type DINT.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;This may come to an overfow because DINT can store a maximum of +/-2.14 * 10^9&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;The range of MODR is therefore limited to +/- 2.14 * 10^9.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;For DIVI = 0 the function returns 0.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;MODR(A, M) = A - M * FLOOR2(A / M).&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;
						&lt;br&gt;
						Example: &lt;br&gt;
						MODR(5.5, 2.5) result 0.5.</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="IN" type="REAL">
							<descr>Dividend</descr>
						</var>
						<var name="DIVI" type="REAL">
							<descr>Divisor</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.5	10. mar. 2009
programmer 	hugo
tested by		tobias

this is a modulo funtion for real numbers
modr(5.5,2.5) = 0.5

*)


IF divi = 0.0 THEN
	MODR := 0.0;
ELSE
	MODR := in - TO_REAL(FLOOR2(in / divi)) * divi;
END_IF;

(* revision history

hm	4. aug.2006		rev 1.0

hm	28. jan.2007	rev 1.1
	modr(x,0) will deliver the result 0

hm	21. mar 2008	rev 1.2
	use D_trunc for compatibility reasons

hm	4. apr. 2008	rev 1.3
	added type conversion to avoid warnings under codesys 3.0

hm	31. oct. 2008	rev 1.4
	changed algorithm to the more common version using floor instead of TRUNC

hm	10. mar. 2009	rev 1.5
	real constants updated to new systax using dot

*)
]]>
				</sourceCode>
			</function>
			<function name="RND" version="1.0.0" creationDate="0" lastModifiedDate="1637578885" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Round to N digits</title>
				<descr>&lt;HTML&gt;The function R ND rounds the input value IN to N digits.&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;Follows the last point a number that is greater than 5, the last digit is rounded up.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt; RND internally uses the standard function TRUNC() which converts the input value to an INTEGER type DINT. &lt;/li&gt;&lt;br&gt;
						&lt;li&gt;This may come as an overfow because DINT can store in maximum +/-2.14*10^9. &lt;/li&gt;&lt;br&gt;
						&lt;li&gt;The range of the RND is therefore limited to +/-2.14*10^9 .&lt;/li&gt;&lt;br&gt;
						&lt;li&gt; See also the ROUND function which rounds the input value to N decimal places. &lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;
						Example: &lt;br&gt;
						RND(355.55, 2) = 360&lt;br&gt;
						RND(3.555, 2) = 3.6&lt;br&gt;
						&lt;br&gt;
						ROUND(3.555, 2) = 3.56&lt;br&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
						<var name="N" type="INT">
							<descr>Number of digit</descr>
						</var>
					</inputVars>
					<localVars>
						<var name="M" type="REAL"/>
					</localVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[

(*
version 1.2	10. mar. 2009
programmer 	hugo
tested by		tobias

this function rounds a real down to n digits total.
round(3.1415,2) = 3.1

*)

IF X = 0.0 THEN
	RND := 0.0;
ELSE
	M := POW(10.0, TO_REAL(N) - CEIL(LOG(ABS(X))));
	RND := TO_REAL(TO_DINT(X * M)) / M;
END_IF;


(* revision history
hm	11. mar 2008	rev 1.0
	original version

hm	26. oct. 2008	rev 1.1
	code optimization

hm	10. mar. 2009	rev 1.2
	real constants updated to new systax using dot																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											

*)


]]>
				</sourceCode>
			</function>
			<function name="RDM" version="1.0.0" creationDate="0" lastModifiedDate="1637665724" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Pseudo- random number</title>
				<descr>&lt;HTML&gt;RDM calculates a pseudo- random number.&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;This is the PLC's internal Timer read and converted into a pseudo-random number.&lt;li&gt;&lt;br&gt;
						&lt;li&gt; Because RDM's is written as a function and not as a function module, it can not save data between 2 calls and should therefore be used with caution.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt; RDM is only called once per cycle, it produces reasonable good results.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;But when it is repeatedly called within a cycle, it delivers the same number, most likely because of the PLC timer is still on the same value.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;If the function is repeatedly used within a cycle, so it must be passed with each call a diferent number of starts (LAST).&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;It shall be called only once per cycle, is sufficient to call RDM(0).&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;As a starting number for each call, the last calculated number of RDM can be used.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;Supplied by RDM random numbers between 0 and 1, which does not contain 1 (0 &lt;=random number &lt; 1) &lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="last" type="REAL">
							<descr>Last calculated value</descr>
						</var>
					</inputVars>
					<localVars>
						<var name="tn" type="DWORD"/>
						<var name="tc" type="INT"/>
					</localVars>
					<localConsts>
						<const name="E" type="REAL">
							<descr>Euler constant e</descr>
							<initValue>2.71828182845904523536028747135266249</initValue>
						</const>
					</localConsts>
					<externalVars>
						<var name="sysTimer" type="UDINT"/>
					</externalVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.9	10. mar. 2009
programmer 	hugo
tested by		tobias

this function calculates a pseudo random number
to generate the number it reads the sps timer and calculates a random number between 0 and 1:
in order to use rdm more then once within one sps cycle it need to be called with different seed numbers LAST.

*)

tn := sysTimer;
tc := BIT_COUNT(tn);
tn.31 := tn.2;
tn.30 := tn.5;
tn.29 := tn.4;
tn.28 := tn.1;
tn.27 := tn.0;
tn.26 := tn.7;
tn.25 := tn.6;
tn.24 := tn.3;
tn := ROL(tn,BIT_COUNT(tn)) OR 16#80000001;
tn := tn MOD 71474513 + TO_DWORD(tc + 77);
RDM := FRACT(TO_REAL(tn) / 10000000.0 * (E - LIMIT(last,0.0,1.0)));


(*
pt := ADR(temp);
pt^ := (sysTimer AND 16#007FFFFF) OR 16#3D000000;
RDM := fract(modR(temp*e+pi1, PI1-last) + modR(temp*PI1+e + last,e-last));
*)

(* revision history
AXEL	23 nov 2021
	replaced T_PLC_MS with sysTimer to avoid dependencies

hm		16. jan 2007		rev 1.0
	original version

hm		11. nov 2007		rev 1.1
	changed time() into t_plc_ms()

hm		20. nov 2007		rev 1.2
	changed code of temp calculation to avoid overflow in modr due to resuclt would not fit DINT for high timeer values

hm		5. jan 2008		rev 1.3
	changed calculation of temp to avoid problem with high values of t_plc_ms

hm		2. feb 2008		rev 1.4
	changed algorithm to avoind non iec functions and guarantee more randomness

hm	10. mar. 2008		rev 1.5
	make sure last will be between 0 and 1 to avoid invalid results

hm	16. mar. 2008		rev 1.6
	added conversion for tc to avoid warnings under codesys 3.0

hm	18. may. 2008		rev 1.7
	changed constant E to E1

hm	18. oct. 2008		rev 1.8
	using math constants

hm	10. mar. 2009		rev 1.9
	real constants updated to new systax using dot

*)
]]>
				</sourceCode>
			</function>
			<function name="RDMDW" version="1.0.0" creationDate="0" lastModifiedDate="1637575608" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Random number with 32 bits</title>
				<descr>&lt;HTML&gt;RDMDW charges pseudo - random number with 32 bits in length in the format DWORD.&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;This is the PLC's internal timer that is read and is transferred into a pseudo random number.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;Since RDMDW as a function and was not written as a function module, it can not save data between 2 calls and should therefore be used with caution.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;If RDMDW called only once per cycle, it produces reasonable good results. But when it is repeatedly called within a cycle, it delivers the same number, most likely because of the PLC timer is still on the same value. &lt;/li&gt;&lt;br&gt;
						&lt;li&gt;If the function is repeatedly used within a cycle, so it must be passed with each call a diferent number of starts (LAST). &lt;/li&gt;&lt;br&gt;
						&lt;li&gt;If it be called only once per cycle, it is sufcient to call RDMDW(0).&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;As a starting number for each call, the last number accounted by RDMDW be used.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;That result from RDMDW is a random 32-bit wide bit pattern. &lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;</descr>
				<returnValue>DWORD</returnValue>
				<vars>
					<inputVars>
						<var name="last" type="DWORD"/>
					</inputVars>
					<localVars>
						<var name="RX" type="REAL"/>
						<var name="M" type="REAL"/>
						<var name="NONAME" type="@REAL"/>
					</localVars>
					<localConsts>
						<const name="PI" type="REAL">
							<descr>Kreiszahl PI</descr>
							<initValue>3.14159265358979323846264338327950288</initValue>
						</const>
						<const name="E" type="REAL">
							<descr>Euler constant e</descr>
							<initValue>2.71828182845904523536028747135266249</initValue>
						</const>
					</localConsts>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[




(*
version 1.2	18. oct. 2008
programmer 	hugo
tested by		tobias

this function calculates a DWORD pseudo random number.

*)

M := TO_REAL(BIT_COUNT(last));
RX := RDM(FRACT(M * PI));
RDMDW := SHL(TO_DWORD(rx*65535),16);
RX := RDM(FRACT(M * E));
RDMDW := RDMDW OR (TO_DWORD(rx*65535) AND 16#0000FFFF);



(* revision history
hm		14. mar 2008		rev 1.0
	original version

hm		18. may. 2008		rev 1.1
	changed constant E to E1

hm		18. oct. 2008		rev 1.2
	using math constants

*)
]]>
				</sourceCode>
			</function>
			<function name="SGN" version="1.0.0" creationDate="0" lastModifiedDate="1634723864" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Signum of X.</title>
				<descr>&lt;HTML&gt;The function SGN calculates the Signum of X. &lt;br&gt;&lt;br&gt;
						SGN = +1 if X &gt; 0&lt;br&gt;
						SGN = 0 if X = 0&lt;br&gt;
						SGN = -1 if X &lt; 0&lt;br&gt;</descr>
				<returnValue>INT</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input value</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.1	11. nov. 2008
programmer 	hugo
tested by	tobias

sgn returns 0 when X = 0 , -1 when X < 1 and +1 when X > 1

*)


IF X > REAL#0 THEN
	SGN := 1;
ELSIF X < REAL#0 THEN
	SGN := -1;
ELSE
	SGN := 0;
END_IF;



(* revision histroy
hm	16. oct 2007	rev 1.0
	original version

hm	11. nov 2007	rev 1.1
	changed type of function from real to int

*)
]]>
				</sourceCode>
			</function>
			<function name="WINDOW" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Test input within limits</title>
				<descr>&lt;HTML&gt;The WINDOW function tests whether the input value is within the limits defined by the LOW and HIGH.&lt;br&gt;
						WINDOW is exactly TRUE if IN &lt; HIGH and IN &gt; LOW.</descr>
				<returnValue>BOOL</returnValue>
				<vars>
					<inputVars>
						<var name="low" type="REAL">
							<descr>Lower limit</descr>
						</var>
						<var name="in" type="REAL">
							<descr>Input value</descr>
						</var>
						<var name="high" type="REAL">
							<descr>Higher limit</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
	version 1.1	22 jan 2007
	programmer 	hugo
	tested BY	tobias

this checks a signal if the signal is between the upper and lower limit
*)

WINDOW := in < high AND in > low;


(* revision history
hm	22.1.2007	rev 1.1
	changed the order of inputs to low, in, high

*)
]]>
				</sourceCode>
			</function>
			<function name="SIGN_R" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>TRUE if the input value is negative</title>
				<descr>&lt;HTML&gt;The SIGN_R function returns TRUE if the input value is negative.&lt;br&gt; The input values are of type REAL.</descr>
				<returnValue>BOOL</returnValue>
				<vars>
					<inputVars>
						<var name="in" type="REAL">
							<descr>Input value</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.4	10. mar. 2009
programmer 	hugo
tested by		tobias

this function return true if the real input is negative

*)

SIGN_R := in < 0.0;


(* revision history
hm 19.1.2007	rev 1.1
	changed method of function for better compatibility to other systems

hm	1.12.2007	rev 1.2
	changed code to improve performance

hm	14. jun. 2008	rev 1.3
	improved performace

hm 10. mar. 2009	rev 1.4
	real constants updated to new systax using dot																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											

*)
]]>
				</sourceCode>
			</function>
			<function name="TANC" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<descr>&lt;HTML&gt;TANC function calculates the following formula: with TANC(0) = 1.&lt;br&gt;
						&lt;img src= tanc.jpg /&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input value</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.1	10. mar. 2009
programmer 	hugo
tested by		oscat

this function calculates the tanc function.

*)

IF X = 0.0 THEN
	TANC := 1.0;
ELSE
	TANC := TAN(x) / x;
END_IF;


(* revision histroy
hm	23. oct. 2008	rev 1.0
	original version

hm 10. mar. 2009	rev 1.1
	real constants updated to new systax using dot																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											

*)
]]>
				</sourceCode>
				<images>
					<image name="tanc.jpg" width="118" height="46" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CAAuAHYDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6KKKACiiigAooooAKxdL8SaZrWoatY2
V5FcXWk3K2d9HGebeZoY5ljb/a8uWNv+BLW1X5n6Po2gfDH4f/tI3EHi3xZ4V1Wf4iTaJYy6
brV1cXdwskli3lxxzXCx+dJuMf2qRvMVZN3mbflYA/TCivzA8Var4q0r4c/tX6DP4n1bwTce
Fv7J1DSdL0/xfeai1jJJblpoVupGWRlk3L5kf3VZv4l+99C/DHQ9Q+Fv7ZVt4Tt/FXibxBpW
tfD9ta1CPxBq8l9uvo7+OP7QFb5Y2ZZGXbGqx/3VWgD2bwx4t1fxp8aPGVpbXbW/hXwpHDo8
kCxqftmpTRx3Ujs23dthhkt1Xay/NNNu3bV2wfGb4/ab8DbrwzDq/h3X9Wi8RajHpNldaTHb
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
rhV+Xp8o9K9GoAKKKKACiiigD//Z]]>
					</image>
				</images>
			</function>
			<function name="SIGMOID" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Sigmoid function</title>
				<descr>&lt;HTML&gt;The Sigmoid is also named Gooseneck - function and described by the following equation:&lt;br&gt;
						SIGMOID = 1 / (1 + EXP(-X))&lt;br&gt;
						&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;The Sigmoid is often used as activation function.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;By its behavior the Sigmoid is qualifed for soft switching transitions.&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;
						The following chart illustrates the progress of the Sigmoid :&lt;br&gt;
						&lt;img src= sigmoid.jpg /&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input value</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.2	10. mar. 2009
programmer 	hugo
tested by		tobias

this function calculates the sigmoid function

*)

IF X > 20.0 THEN
	SIGMOID := 1.0;
ELSIF x < -85.0 THEN
	SIGMOID := 0.0;
ELSE
	SIGMOID := 1.0 / (1.0 + EXP(-X));
END_IF;


(* revision history
hm	10.12.2007		rev 1.0
	original version

hm	11. mar. 2008		rev 1.1
	extended range of valid inputs to +inv / -inv

hm 10. mar. 2009		rev 1.2
	real constants updated to new systax using dot																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											

*)
]]>
				</sourceCode>
				<images>
					<image name="sigmoid.jpg" width="208" height="91" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CABbANADASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6KKKAKsjf6VD/wKrLfdNVZv+PyD6NVp
vumgCCxbdaoTRI3+kw/8CpNP/wCPWOib/j6t/wDgVAFhqr2LbrVd1WG+6ar6f/x6rQASN/pU
H/Aqs1Wm/wCPq3/4FVmgCvZNutlJpJGP2iH/AIFRp/8Ax6rRN/x9W/8AwKgDivjd/wAk9k/7
Cel/+nC3rtrNmaLnruNcT8cP+Sfy/wDYS0v/ANOFvXbWf+p/4EaAElP+kQfVqs1Vm/4+Lf8A
3mq1QBUsWZoeW3Hc1PuM+bB/vUyw/wCPf/gRpbr/AI+Lf/eoAtVWsm3Q8/3jVmqtj/qv+BGg
B1w37yD/AHqsVVuf+PiD/eq1QBWs23QnP940tx/roP8Aepln/qT/ALzUtx/rrf8A3qALVFFF
ABRRUcsZkHDsv+7QBBN/x+QfRqtN901Qkhb7RCvnP826p2s/l/10v/fVACWX/Hsn0pJP+PmH
/gVQ2tsWgU+a6/7pokt2W4iHnP8ANuoKNBqr6f8A8eq0fY/+m0v/AH1UFralrdW811/3aCSe
b/j6t/8AgVWaz5LfbcQr5z/Nuqf7H/02l/76oAbY/wDHslEn/H1B/wACqG1ti0CnzXX/AHTR
NAftES+a/wA26gs8L+JXx48Fa54N1e1bW4NLvNP1yytZbXV3W1nPl3luzSLHJ83l7W3KzL81
e0+G/Eel+KdKF9o+pWuqWjOyefZzLJHuH3l3LXn3xJ8LW/hvwTrs1vcXDSap4g0+/k3MvyyN
eWke1f8AZ/drXp9vC0kO7znqBPl6CyMPPgzxyasMw29DiuQ8YeMtH8H/AGUX16xurlmS2tI/
mmuJP7sa/wB6uaXQvHPjhmOoaj/wh2n9Y7XTis1yWHd5WXbtP93bu/2qiVSMXyx1Z008O5R5
py5Y93+i3Z3lzr2naHYm41G+trGENgyTyhFz9Wrn9W+LnhHT40lOu210FPMdiTcyH/gEYZqz
dH+CPhOzma5ezm1C5YMsjX1zJOrt/E3lyMy7v+A10Vn4C0DRruKaw0exsrkhlWaG2jSQf8CC
1P76XZG3LhKb+Jy+5f5nPf8ADQfg/wD57an/AOCm7/8AjdQ2v7QHg9Y+Z9Sxub/mEXX/AMbr
0j+z1/56SfnUNvaiaHd5jLz/AA1HLW/mX3f8EPaYT/n2/wDwL/7U89m/aA8HNLF+/wBSyrf9
Ai6/+N1L/wANB+D/APntqf8A4Kbv/wCN13s1qFkiHmN8zVN/Z6/89JPzo5a38y+7/gh7TCf8
+3/4F/8Aanm9r+0B4PSPaJtSPzN/zCbr/wCN06T9oDwe0kX77Usq3/QJuv8A43Xf29qJY928
/eb7tLNZhZIv3h+ZqOWt/Mvu/wCCP2mD/wCfb/8AAv8A7U53wh8TtE8bXVxBpTXTyQorv59l
NBw3TmRVzXYZC1BBBtyN7N+NT7cjkcV0wvb3jgqOMpfu1Zet/wDIkori/wDhdPw+/wCh78Nf
+De3/wDi6P8AhdPw+/6Hvw1/4N7f/wCLqiDqZv8Aj8g+jVab7prhZPjN4A+0Qt/wnXhrb83/
ADGLf/4qpm+NHw+x/wAj14a/8G9v/wDF0AdVY/8AHon0ok/4+oP+Bfyrj7P4zeAFto8+OvDX
/g4t/wD4ukl+M3gD7RCf+E68Nfxf8xi3/wDiqCup3dV9P/49VrlP+F0/D7/oe/DX/g3t/wD4
uoLP4zeAVt1/4rrw1/4OLf8A+KoJOxm/4/Lf/gVWq4Sb4zeAPtMB/wCE68Nfxf8AMYt//iqn
/wCF0/D7/oe/DX/g3t//AIugDqbH/j2Slm/4+oP+BVx1n8ZvAC26Z8deGv8AwcW//wAXRJ8Z
vAH2mD/iuvDWPm/5i9v/APF0FdSD43MP+EBlHf8AtLS//Thb1o+KfFy+G7S3gt4jf6teM0dl
Yx/ekb1P91Vz8zV5n8ePjf8AD+x+Gt5cJ4x0O9aG8sJzbWmowzTOqXkLMFVW3N8qtTfhf448
GRy3HirXfH+hT6/qkS+bDLrFv5dpGpZlRF3fJ8rLu/2qxlJ83JE66NKKg61TZdO7/wAj0Twj
4PfTLptW1OVb7XLz/X3Gz5Y17Qxf3Y1/8e+9Xc/w1wsnxm8AfaIf+K58N/xf8xe3/wDiqn/4
XV8Psf8AI9eGsf8AYXt//i60UVFWRzTqSqO8jqrL/Uf8CP8AOi4/10H+9XHWfxm8ALDz468N
df8AoMW//wAXRP8AGbwA0kP/ABXPhr73/QYt/wD4uqJO8qrY/wCq/wCBGuV/4XT8Pv8Aoe/D
X/g3t/8A4uq9n8ZvACw8+OvDX3m/5jFv/wDFUEnZXP8Ax8Qf71Wq4S4+M3gAyQf8V14a+9/0
GLf/AOKqf/hdPw+/6Hvw1/4N7f8A+LoA6mx/1J/3jS3H+sh/3q42z+M3gBYefHXhr7x/5i9v
/wDF0s/xm8AeZD/xXPhr73/QYt//AIugs7uiuL/4XT8Pv+h78Nf+De3/APi6P+F0/D7/AKHv
w1/4N7f/AOLoIN3XNWXQ7Brr7JdXu1lXybKLzJPmbG7bXg3jLxj4l0W88RWeqeKJrHTV15ox
qkFvHa/Y4Tpv2i3t1Zt33ptq7m+Zmbb/ABba+jqdUyXMNOxzXhG6vtS8N+H7zVoFg1S4sIpr
qHG3y5mjVpF2/wC9uromVdv3VqvN/wAfkH0arTfdNUIrWKr9lj+VaJFX7VB8v96l0/8A49Y6
Sb/j8t/+BUAWNo/u1X09R9lXirVVtP8A+PVaAEmVftUHy/3qsbR/dqvN/wAflv8A8CqzQBSt
Ix9nTC80y6aK3aN3KrGm5izVJZZFuuTxXlev3V/8RviEPDdt5beFdNXOsSLIVeWcrujtv93a
ys395WqJS5YnTRoe1k+Z2S1b/rr0RxHxAXUPiRFH4ouEhj8M6XqtnHpduynzJrj+0II/tW7O
1kaNmCr/ALVfRltGvk/dGcn+dcN8ZLWO0+HZhhVY4k1DTFVQOAPt9vXc2eVhHPQnP51MI8vq
Fet7S1laK0S8v63FlVfPt/lHVqs7R/dqCb/j4t/q1Wa1OYpWKjyOB/EadcKPOg4/iosf9Sf9
40XH+ug/3qCyztH92q1iq+SflH3mq3VWx/1X/AjQQFwq+dB8o+9VjaP7tV7n/j4g/wB6rVAF
SzVfJ+6v3mpl0v7yHbtVtzbdw/2afZ/6k/7zUtx/rrf/AHqAPmXWfH3jPSdNtYbzxDLJqUN1
qy2s0dtHbrql5FqEcNva+XtbcvktJ+7VtzKu7d8u6vqLaP7tLkUtREbdyJfmHUn6ijcBwaX8
P1rmPGHgeHxnDbxz6lqdgIZPMVtNvJLZm46MVPzCqldLQcIxbtJ2X3m/I3+mQfRqnZ+DXlj/
AALsFuIx/wAJF4ny27/mMTf/ABVSt8CLD/oYvFH/AIOZ/wD4qsOap/L+J2ezw/8Az9/D/gno
9nJtt0okkP2iD/gVeZ23wJsGhVh4i8TD/uMTf/FUP8CbBZo1/wCEi8TfNu/5jE//AMVT55/y
/iV7PDf8/fw/4J6p5lQWbbbZa82/4URYf9DH4o/8HM//AMVTLf4F2EkKsPEXicf9xib/AOKp
c1T+X8SfZ4f/AJ+/h/wT0O71C3s5ojPPFEPmx5jqtc34k+KnhvwzLBBd6rCby4DNBaRfPNPj
+GNR941hxfAXwxJMi6st54iXkxx6zcyXaxf7Sbvumuq8N/Dnw54Phlj0PSLXSkmbzJFtYwu5
vWi9aXZfiXy4SC1k5fJJfqcJeX3i/wCJmneX4ejfwlpmVSa41W2YXcvzfMscat8nyjbub+9/
s12Wi+GbHwNopg0izcmON5RGzs8kz7e7MdzN2+auis7NJLdSWf8A76oktUWeJdz/ADbu9ONO
2snqZzxDlHkgrR7f5vqfO9r421Xxp8O9TGp38erKk3h6+W4jjjXyZLi6hkktf3f/ADzZV+98
3zfNur6Qs/8AUf8AAj/OvFvjd8NoF8K3N5Y63q2h28mpaez2GlyQw27O19Duk2+U37xi27d/
exXpXhfw1JoOntDJrGqauWkaTz9SmWSRf9nKqvy/L/49Whxs3pv+Pi3/AN5qtVnyWqrcQruk
+bd/FU32GP8AvP8A99VYhLL/AFH/AAI/zouP9dB/vVFa2ytCG3P/AN9UTWqrJF8z8t/eoKNC
qtj/AKr/AIEaPsMf95/++qis7dWh3bpPvf3qCSW5/wCPiD/eq1VCa1VZofmk+Zv71S/YY/7z
/wDfVABZ/wCqP+8aLj/Wwf71V7e1SSPJZ/vN/FTpbRFkiwz8t/eoLNCioY4Vj+YMzf7zVNQQ
FFFFAFSb/j8g+jVab7pqu/8Ax+Q/Rqs0AVtP/wCPWOkm/wCPy3/4FTrH/j2Skk/4+oP+BUAW
araf/wAeq1ZqvY/8eyUANm/4/Lf/AIFVmq8n/H1B/wACqzQBW0//AI9Vom/4+rf/AIFS2P8A
x7JRJ/x8Q/8AAqAOJ+N3/JPZP+wnpf8A6cLeu1s/9R/wI/zqO80+21a38i8gjuYd6v5cigjc
rhlOPZlB/CpbH/j2SgBs3/H1B/wKrVV5P+PiH/gVWKAKll/qP+BH+dFx/roP96ks/wDUD/eb
/wBCNLN/x8QfVv8A0Ggot1Vsf9V/wI1aqtZf6n/gTf8AoRoJEuf+PiD/AHqtVVm/11v/AL//
ALLVqgCrY/6r/gRp1x/roP8AepLP/Un/AHjSTf663/3/AP2WgC1RRRQB/9k=]]>
					</image>
				</images>
			</function>
			<function name="REAL_TO_FRAC" version="1.0.0" creationDate="0" lastModifiedDate="1634806600" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Converts a foating point number (REAL) in a fraction</title>
				<descr>&lt;HTML&gt;REAL_TO_FRAC converts a foating point number (REAL) in a fraction.&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;The function returns the data type is a FRACTION of the structure with 2 values.&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;With the input X, the maximum size of the counter can be specifed.&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;
						Example:&lt;br&gt;
						REAL_TO_FRAC(3.1415926, 1000) results 355 / 113.&lt;br&gt;
						355/133 gives the best approximation for the denominator &lt; 1000</descr>
				<returnValue>Oscat_Math_Fraction</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>Input</descr>
						</var>
						<var name="N" type="INT">
							<descr>Maximum value of the denominator</descr>
						</var>
					</inputVars>
					<localVars>
						<var name="temp" type="DINT">
							<descr>Merker für Berechnungen</descr>
						</var>
						<var name="sign" type="BOOL">
							<descr>Vorzeichen vom Eingangswert</descr>
						</var>
						<var name="X_gerundet" type="DINT">
							<descr>Wert von Bruch, auf ganze Zahl gerundet</descr>
						</var>
						<var name="X_ohne_Nachkomma" type="REAL">
							<descr>Wert von Bruch, ohne Nachkommastellen</descr>
						</var>
						<var name="Numerator" type="DINT">
							<descr>Initialwert Zaehler</descr>
						</var>
						<var name="Denominator" type="DINT">
							<descr>Initialwert Nenner</descr>
						</var>
						<var name="Numerator_old" type="DINT">
							<descr>Initialwert Zaehler der letzten Berechnung</descr>
						</var>
						<var name="Denominator_old" type="DINT">
							<descr>Initialwert Zaehler der letzten Berechnung</descr>
						</var>
						<var name="tmpX" type="REAL"/>
					</localVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[

(*
version 1.1		06. apr. 2011
programmer 	alexander
tested by		hugo

this function calculates the closest fraction for a real number

*)
Numerator := 1;
Denominator := 0;
Numerator_old := 0;
Denominator_old := 1;

tmpX:= X;

IF tmpX < 0.0 THEN
	sign := TRUE;								(* Sign *)
	tmpX := ABS(tmpX);								(* Abs *)
END_IF;

REPEAT
	X_gerundet := TO_DINT(tmpX);

	(* Numerator *)
	temp := numerator * X_gerundet + numerator_old;		(* Zaehler um Vorkammawert erweitern *)
	numerator_old := numerator;							(* Zaehler der letzten Berechnung speichern *)
	numerator := temp;									(* Zaehler dieser Berechnung speichern *)

	(* Denominator *)
	temp := denominator * X_gerundet + denominator_old;	(* Nenner um Vorkammawert erweitern *)
	denominator_old := denominator;						(* Nenner der letzten Berechnung speichern *)
	denominator := temp;								(* Nenner dieser Berechnung speichern *)

	(* Residual value *)
	X_ohne_Nachkomma := TO_REAL(X_gerundet);
	IF tmpX = X_ohne_Nachkomma THEN						(* Bruch geht ohne Rest auf *)
		IF ABS(denominator) <= N THEN						(* kein Rundungsfehler *)
			numerator_old := numerator;					(* Numerator_old wird von Funktion zurückgegeben *)
			denominator_old := denominator;			(* Denominator_old wird von Funktion zurückgegeben *)
		END_IF;
		EXIT;											(* keine weitere Berechnung notwendig *)
	ELSE
		tmpX := 1.0 / (tmpX - X_ohne_Nachkomma);				(* Kehrwert vom Rest -> Neuer Bruch *)
	END_IF;

UNTIL
	ABS(Denominator) > N
END_REPEAT;

(* correct sign if X was negative *)
IF sign THEN
	REAL_TO_FRAC.NUMERATOR := -1 * ABS(TO_INT(numerator_old));
ELSE
	REAL_TO_FRAC.NUMERATOR :=  ABS(TO_INT(numerator_old));
END_IF;
REAL_TO_FRAC.DENOMINATOR := ABS(TO_INT(denominator_old));


(* revision history
hm		19. jan. 2011	rev 1.0
	original version

ad		06. apr. 2011	rev 1.1
	optimized code
*)
]]>
				</sourceCode>
			</function>
			<function name="RAD" version="1.0.0" creationDate="0" lastModifiedDate="1637576500" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Angle value from degrees to radians</title>
				<descr>&lt;HTML&gt;The RAD function converts an angle value from degrees to radians taking into account that the DEG will not be greater than 360.&lt;br&gt;&lt;br&gt;
						If DEG is greater than 360, 360 is to be subtracted as long as DEG is again between 0-360°&lt;br&gt;
						&lt;br&gt;
						Example&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;RAD(0) = 0&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;RAD(180) = π&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;RAD(360) = 0&lt;/li&gt;&lt;br&gt;
						&lt;li&gt;RAD(540) = π&lt;/li&gt;&lt;br&gt;
						&lt;/ul&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="DEG" type="REAL"/>
					</inputVars>
					<localConsts>
						<const name="PI2" type="REAL">
							<descr>PI * 2</descr>
							<initValue>6.28318530717958647692528676655900576</initValue>
						</const>
					</localConsts>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.2	18. oct. 2008
programmer 	hugo
tested by	tobias

this function converts Radiant to degrees

*)

RAD := MODR(0.0174532925199433 * DEG, PI2);

(* revision history
hm	4. aug 2006		rev 1.0
	original version

hm 	16. oct 2007	rev 1.1
	added modr statement which prohibits rad to become bigger than 2PI

hm	18. oct 2008	rev 1.2
	using math constants

*)
]]>
				</sourceCode>
			</function>
			<function name="ROUND" version="1.0.0" creationDate="0" lastModifiedDate="1634811885" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Rounds the input value IN to N digits</title>
				<descr>&lt;HTML&gt;The function ROUND rounds the input value IN to N digits.&lt;br&gt;
						&lt;ul&gt;
						&lt;li&gt;Follows the last digit a digit greater than 5 the last digit is rounded up.&lt;/li&gt;
						&lt;li&gt;ROUND internally uses the standard function TRUNC() which converts the input value to an INTEGER type DINT.&lt;/li&gt;
						&lt;li&gt;This may come as an overfow because DINT can store in maximum +/-2.14*10^9.&lt;/li&gt;
						&lt;li&gt;The range of ROUND is therefore limited to +/2.14 * 10^9.&lt;/li&gt;
						&lt;/ul&gt;&lt;br&gt;
						Example:&lt;br&gt;
						ROUND(3.555, 2) = 3.56</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="in" type="REAL">
							<descr>Input value</descr>
						</var>
						<var name="N" type="INT">
							<descr>Number of decimal places</descr>
						</var>
					</inputVars>
					<localVars>
						<var name="X" type="REAL"/>
					</localVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.4	16. mar 2008
programmer 	hugo
tested by	tobias

this function rounds a real down to n digits behind the comma.
round(3.1415,1) = 3.1

*)

IF N < 4 THEN
	IF N < 2 THEN
		IF N = 0 THEN X := 1.0; ELSE X := 10.0; END_IF;
	ELSE
		IF N = 2 THEN X := 100.0; ELSE X := 1000.0; END_IF;
	END_IF;
ELSE
	IF N < 6 THEN
		IF N = 4 THEN X := 10000.0; ELSE X := 100000.0; END_IF;
	ELSE
		IF N = 6 THEN X := 1000000.0; ELSE X := 10000000.0; END_IF;
	END_IF;
END_IF;

ROUND := TO_REAL(TO_DINT(in * X)) / X;

(*
IF in >= 0 THEN
	ROUND := TRUNC(in * X + 0.5) / X;
ELSE
	ROUND := TRUNC(in * X - 0.5) / X;
END_IF;
*)



(* revision history
hm	1. sep 2006	rev 1.0
	original version

hm	2. dec 2007	rev 1.1
	changed code for better performance

hm	8. jan 2008	rev 1.2
	further improvement in performance

hm 11. mar. 2008	rev 1.3
	corrected an error with negative numbers
	use real_to_dint instead of trunc

hm	16. mar 2008	rev 1.4
	added type conversion to avoid warning under codesys 3.0

*)




]]>
				</sourceCode>
			</function>
			<function name="HYPOT" version="1.0.0" creationDate="0" lastModifiedDate="0" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Hypotenuse of a right triangle</title>
				<descr>&lt;HTML&gt;The Mortgage function calculates the hypotenuse of a right triangle, by the theorem of Pythagoras.&lt;br&gt;
						&lt;img src= hypot.jpg /&gt;</descr>
				<returnValue>REAL</returnValue>
				<vars>
					<inputVars>
						<var name="X" type="REAL">
							<descr>X value</descr>
						</var>
						<var name="Y" type="REAL">
							<descr>Y value</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.0	21 feb 2008
programmer 	hugo
tested by	oscat

this function calculates the pythagorean function

*)

HYPOT := SQRT(x*x + y*y);


(* revision history
hm	21. feb 2008	rev 1.0
	original version

*)

]]>
				</sourceCode>
				<images>
					<image name="hypot.jpg" width="111" height="21" icon="false">
						<![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoM
DAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsN
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAAR
CAAVAG8DASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9PvEniTS/CGh32ta1fwaXpNjE091eXThI
oYx1ZmPQCrWn6hb6tp9re2kqz2t1Es0Mq9HRgCrD6gg14f8Ati6hdX3wx0zwNpltJe6l481q
08OLbQybGa1djNeknBwn2WG4DNg4DZ56HgtL+PHjfTbWx8Qal4g0qXwyvxNk8KyeXYJBA+mh
DatIGLsYwl7FMVYscoBkmgD64or5em+J3jtvihqGm3niqLQ/CWkeH77xLrmoz6bCsmn2s93K
NMj2sCVmFvBOzb+yLlN2Q2T4L/aO8ceIfh3rt/4qMPgm88G+ErTVdeujagzXGo3Nu08MKRPl
UURqm9OXaScRqUKHcAfW9FfNPwl8WeLPil8drS81vVL3RYfDfg7TZtU8KoI0t01q/i824TBT
zG8iIQ/eYlTcADAZg3c/FDxt4v8AD/iYWuiTSx2XkI+F8E3urjcSc/v4buJew+XbkepzQB67
Xn/xY8M2/jOPw1oVzfaxYw3Wqh5JtE1i7024CRwTSMDJayxuUbaEKk7fnBxuCEZvw58ReMPF
um69HqN/9mvY0jWzuJ/CF1pSxs2/c2ya6k8/ovCldvfduGM74L+L9Q+IN1p9xrRjj8R+HNNm
0rWViACvfm6aGdlUfdUtp5kUd0nQ9OoBYuP2bPC0cEjRap4/llVSUjPxI8QqGOOBn7dx9a5P
4b/BbSvFNrrQ1xvG2mXWm6nJp6y2PxP8R3FtdqiIxkid7tGIVneJgV4eGQZIpth448U+IP2g
PF/w3m8YW1vodpDZaxbXK2oS8mgkdornT0lTYo2Mn+uX94vnoAdykj1rw/4Lt/hx4VudP8J2
9xduoL21rret3dwhcKFVPPmM7xJwOFUgEk7ck5AOY/4Zp8Jf9Bj4gf8Ahx/EP/ydWBqHwm+F
uleJbHw7e+OPFVl4gv0MlppNx8U9dju7lRkFo4jqG5xweQD0qlouvfFD/he3jBF8J+F2nHhz
RS9u3iq5ESL9p1Ta6t/Z3LMQwI2jAReWzhaP7U0NzN8TvgMvhq8isPHs3iS7trG4kjEvlae+
nz/2hIUJwwRBC4B4LrEDwaAJdW+FvgbUPC+tah4O8V6/r9zpTSR3TSfFrxALa1aMEyLM8V5I
yFQDldufpXrvwpsxY/Djw4n2LVtMaayjunsdd1O41G9tpJR5rwy3Fw7yyMjOy/MxwFAGAABD
cfCfw7d+CrTwrJDfQ6TbyrOPsepXNpPJMHMhlkmhkSR3aQmRiWO5yWOTzXS6ZpsOkaba2MDT
vb20axI11cSXEpAGAXkkZndvVmJJPJJNADbzQdN1DU7DUbnT7W51DTy7Wd3NAry2xkXa5jcj
Kbl+U7SMjg15/p/wn02bVprGSw0K38Iafqcep2Gg6fpC24F7tWU3E77ysrCVmkXbHHg7SSxU
GiigDkvhF8ONK13x58RfFnibT9L1/XNT1aC5guZrAA2lvDDHHb267mfPltAZN4xl5WIAr1++
8D+HdU1dNXvdC0271RDFtvZ7SN5h5bbozvIzlGJKn+Ek4xk0UUAT2PhfRtJ1vVdZs9KsbXV9
T2Nf38FuiT3ZRAiea4G59qqqjcTgAAVsUUUAFc/ZeDdD0278RyQaXbq+vTC71Tcu4Xcnkpb5
cHIx5UKLjocE4ySSUUAQ6f8ADvwroc+j3Gn+GtJsZ9Jgey06S2sYo2s4HILxRELlEYgZVcA4
5rpqKKAKEdhaRanNfpawpf3ESQTXSxgSyRxsxjRmxkqplkIB4BdsfeNZeqfD3wrq3ibT/Emo
eGdHv/ENh8tnq1xYRSXdsD18uUqXT8CKKKAOjooooA//2Q==]]>
					</image>
				</images>
			</function>
			<function name="BIT_COUNT" version="1.0.0" creationDate="0" lastModifiedDate="1635508848" excludeFromBuild="FALSE" excludeFromBuildIfNotDef="">
				<title>Number of set bits in IN</title>
				<descr>&lt;HTML&gt;BIT_COUNT determines the number of bits in IN, which have the value TRUE (1).&lt;br&gt;
						&lt;br&gt;The input IN is DWORD and can also process the types Byte and Word.&lt;br&gt;</descr>
				<returnValue>INT</returnValue>
				<vars>
					<inputVars>
						<var name="IN" type="DWORD">
							<descr>Input</descr>
						</var>
					</inputVars>
				</vars>
				<iecDeclaration active="FALSE"/>
				<sourceCode type="ST">
					<![CDATA[


(*
version 1.1	10 sep 2007
programmer 	hugo
tested by		tobias

BIT_COUNT counts the amount True of bits in a dword.
for exabple: bit_count(3) returns 2 because two bits (bits 0 and 1) are true and all others are false. 

*)
Bit_Count := 0;

WHILE in > 0 DO
	IF in.0 THEN Bit_Count := Bit_Count + 1; END_IF;
	in := SHR(in,1);
END_WHILE;



(* revision history
5.7.2007	rev 1.0		original version

10.9.2007	rev 1.1		hm
	changed algorithm for better performace
	the execution time has reduced by a factor of 5
	deleted unused variable temp
*)
]]>
				</sourceCode>
			</function>
		</functions>
		<functionBlocks/>
		<programs/>
		<macros/>
		<structs>
			<struct name="Oscat_Math_Fraction" version="1.0.0">
				<vars>
					<var name="NUMERATOR" type="INT"/>
					<var name="DENOMINATOR" type="INT"/>
				</vars>
				<iecDeclaration active="FALSE"/>
			</struct>
		</structs>
		<typedefs/>
		<enums/>
		<subranges/>
		<interfaces/>
	</lib>
</plcLibrary>
